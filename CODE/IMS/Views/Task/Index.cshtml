@model TaskIndexViewModel
@{
    ViewBag.Title = Pages.TaskIndex;
    ViewBag.PageTitle = Pages.TaskIndex;
    ViewBag.Breadcrumbs = new List<BreadcrumbModel>
    {
        new BreadcrumbModel("Home", "Index", Pages.Home),
        new BreadcrumbModel("Request", "Index", Pages.Task)
    };
}
<!-- Main content -->
<section class="main-content">
    <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
        <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
            @Html.LabelFor(model => model.FilterByRequestType, "Request Type")
        </div>
        <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
            @Html.DropDownListFor(m => m.FilterByRequestType, Model.FilterByRequestType, "Select All", new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
            @Html.ValidationMessageFor(model => model.FilterByRequestType)
        </div>
    </div>
    <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
        <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
            @Html.LabelFor(model => model.FilterByStatus, "Status")
        </div>
        <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
            @Html.DropDownListFor(m => m.FilterByStatus, Model.FilterByStatus, "Select All", new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
            @Html.ValidationMessageFor(model => model.FilterByStatus)
        </div>
    </div>
    <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
        <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
            @Html.LabelFor(model => model.FilterByPeriodOfTime, "Period of Time")
        </div>
        <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
            @Html.DropDownListFor(m => m.FilterByPeriodOfTime, Model.FilterByPeriodOfTime, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
            @Html.ValidationMessageFor(model => model.FilterByPeriodOfTime)
        </div>
    </div>
    <table id="example1" class="@Constants.HtmlFormat.DATATABLE_CLASS_HOVER">
        <thead>
            <tr class="@Constants.HtmlFormat.DATATABLE_HEADER_CLASS">
                <th>
                    Request Type
                </th>
                <th>
                    Status
                </th>
                <th>
                    Assigned Time
                </th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < Model.Tasks.Count; i++)
            {
                <tr class="clickable eachTask" request-code="@Model.Tasks[i].RequestCode" status-code="@Model.Tasks[i].StatusCode" type-code="@Model.Tasks[i].RequestTypeCode" duration="@Model.Tasks[i].DaysFromNow">
                    <td>
                        @Html.DisplayFor(modelItem => Model.Tasks[i].RequestTypeName)
                        @Html.HiddenFor(modelItem => modelItem.Tasks[i].RequestTypeName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => Model.Tasks[i].StatusName)
                        @Html.HiddenFor(modelItem => modelItem.Tasks[i].StatusCode)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => Model.Tasks[i].AssignedTime)
                        @Html.HiddenFor(modelItem => modelItem.Tasks[i].AssignedTime)
                    </td>
                </tr>
            }
        </tbody>
        <tfoot>
            <tr style="background-color: #404040">
                <th>
                    <span style="color: ghostwhite">
                        RequestType
                    </span>
                </th>
                <th>
                    <span style="color: ghostwhite">
                        Status
                    </span>
                </th>
                <th>
                    <span style="color: ghostwhite">
                        Assigned Time
                    </span>
                </th>
            </tr>
        </tfoot>
    </table>
</section><!-- /.content -->
<script>
    function filterRequest() {
        var typeCode = $("#FilterByRequestType").val();
        var statusCode = $("#FilterByStatus").val();
        var duration = $('#FilterByPeriodOfTime').val();
        if (typeCode == null) {
            typeCode = '';
        }
        if (statusCode == null) {
            statusCode = '';
        }
        if (duration == null || isNaN(duration)) {
            duration = 99999;
        }
        duration = duration - 0;

        //if (typeCode == '' && statusCode == '') {
        //    $('#example1 tbody[type-code][status-code]').show();
        //}
        //else {
        //$('#example1 tbody').hide();
        //if (typeCode != '' && statusCode == '') {
        //    $('#example1 tbody[type-code="' + typeCode + '"]').show();
        //} else if (statusCode != '' && typeCode == '') {
        //    $('#example1 tbody[status-code="' + statusCode + '"]').show();
        //} else {
        //    $('#example1 tbody[type-code="' + typeCode + '"][status-code="' + statusCode + '"]').show();
        //}
        //}
        $('#example1 tr[type-code][status-code]').each(function (i, e) {
            var row = $(e);
            var rowTypeCode = row.attr('type-code');
            var rowStatusCode = row.attr('status-code');
            var rowDuration = row.attr('duration');
            var isShow = false;
            if (typeCode == '' && statusCode == '' && duration >= rowDuration) {
                isShow = true;
            } else if (typeCode != '' && statusCode == '') {
                if (rowTypeCode == typeCode && duration >= rowDuration) {
                    isShow = true;
                }
            } else if (typeCode == '' && statusCode != '') {
                if (rowStatusCode == statusCode && duration >= rowDuration) {
                    isShow = true;
                }
            } else {
                if (rowTypeCode == typeCode && rowStatusCode == statusCode && duration >= rowDuration) {
                    isShow = true;
                }
            }
            if (isShow) {
                row.show();
            } else {
                row.hide();
            }
        });
    }
</script>

<script type="text/javascript">
    $('.eachTask').click(function () {
        var requestCode = $(this).attr("request-code");
        window.location.assign('@Url.Action("Detail", "ProcessRequest")' + '/' + requestCode);
    });

    $("#example1").DataTable({
        "aaSorting": [[2, "desc"]], // Sort by first column descending
        "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
            if (aData[1] == "Waiting") {
                $('td', nRow).addClass('background-danger');
            };
            if (aData[1] == "Doing") {
                $('td', nRow).addClass('background-info');
            };
        }
    });

    $("#FilterByRequestType").change(function () {
        filterRequest();

    });

    $("#FilterByStatus").change(function () {
        filterRequest();
    });

    $("#FilterByPeriodOfTime").change(function () {
        filterRequest();
    });

    filterRequest();
</script>