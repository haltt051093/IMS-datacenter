@model TaskIndexViewModel
@{
    ViewBag.Title = Pages.RequestIndex;
    ViewBag.PageTitle = Pages.RequestIndex;
    ViewBag.Breadcrumbs = new List<BreadcrumbModel>
    {
        new BreadcrumbModel("Home", "Index", Pages.Home),
        new BreadcrumbModel("Request", "Index", Pages.Request)
    };
}
<!-- Main content -->
<section class="main-content">

    <table id="example1" class="@Constants.HtmlFormat.DATATABLE_CLASS">
        <thead>
            <tr class="@Constants.HtmlFormat.DATATABLE_HEADER_CLASS">
                <th>
                    Request Code
                </th>
                <th>
                    Request Type
                </th>
                <th>
                    Status
                </th>
                <th>
                    Assignor
                </th>
                <th>
                    Assigned Time
                </th>
                <th>
                    Action
                </th>
            </tr>
        </thead>

        @for (int i = 0; i < Model.Tasks.Count; i++)
            {
            <tbody>
                <tr>
                    <td>
                        @Html.ActionLink(Model.Tasks[i].RequestCode, "Detail", "ProcessRequest",
                            new { code = Model.Tasks[i].RequestCode }, null)
                        @Html.HiddenFor(modelItem => modelItem.Tasks[i].RequestCode)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => Model.Tasks[i].RequestTypeName)
                        @Html.HiddenFor(modelItem => modelItem.Tasks[i].RequestTypeName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => Model.Tasks[i].StatusName)
                        @Html.HiddenFor(modelItem => modelItem.Tasks[i].StatusCode)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => Model.Tasks[i].ShiftHeadName)
                        @Html.HiddenFor(modelItem => modelItem.Tasks[i].ShiftHead)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => Model.Tasks[i].AssignedTime)
                        @Html.HiddenFor(modelItem => modelItem.Tasks[i].AssignedTime)
                    </td>
                    <td>
                        @using (Html.BeginForm("UpdateTaskStatus", "Task", FormMethod.Post))
                        {
                            <input name="TaskCode" type="hidden" value="@Model.Tasks[i].TaskCode" />
                            if (Model.Tasks[i].StatusCode == Constants.StatusCode.TASK_WAITING)
                            {
                                <button type="submit" id="btnAccept" name="@Constants.FormAction.ACTION_NAME" value="@Constants.FormAction.ACCEPT_ACTION" class="@Constants.HtmlFormat.PRIMARY_BUTTON_CLASS">
                                    @Labels.Accept
                                </button>
                            }
                            if (Model.Tasks[i].StatusCode == Constants.StatusCode.TASK_DOING)
                            {
                                <button type="submit" id="btnCancel" name="@Constants.FormAction.ACTION_NAME" value="@Constants.FormAction.CANCEL_ACTION" class="@Constants.HtmlFormat.PRIMARY_BUTTON_CLASS">
                                    Not Finished
                                </button>
                            }
                        }
                    </td>
                </tr>
            </tbody>
        }
    </table>
</section><!-- /.content -->
<script>
    function filterRequest() {
        var typeCode = $("#FilterByRequestType").val();
        var statusCode = $("#FilterByStatus").val();
        var duration = $('#FilterByPeriodOfTime').val();
        if (typeCode == null) {
            typeCode = '';
        }
        if (statusCode == null) {
            statusCode = '';
        }
        if (duration == null || isNaN(duration)) {
            duration = 99999;
        }
        duration = duration - 0;

        //if (typeCode == '' && statusCode == '') {
        //    $('#example1 tbody[type-code][status-code]').show();
        //}
        //else {
        //$('#example1 tbody').hide();
        //if (typeCode != '' && statusCode == '') {
        //    $('#example1 tbody[type-code="' + typeCode + '"]').show();
        //} else if (statusCode != '' && typeCode == '') {
        //    $('#example1 tbody[status-code="' + statusCode + '"]').show();
        //} else {
        //    $('#example1 tbody[type-code="' + typeCode + '"][status-code="' + statusCode + '"]').show();
        //}
        //}
        $('#example1 tbody[type-code][status-code]').each(function (i, e) {
            var row = $(e);
            var rowTypeCode = row.attr('type-code');
            var rowStatusCode = row.attr('status-code');
            var rowDuration = row.attr('duration');
            var isShow = false;
            if (typeCode == '' && statusCode == '' && duration >= rowDuration) {
                isShow = true;
            } else if (typeCode != '' && statusCode == '') {
                if (rowTypeCode == typeCode && duration >= rowDuration) {
                    isShow = true;
                }
            } else if (typeCode == '' && statusCode != '') {
                if (rowStatusCode == statusCode && duration >= rowDuration) {
                    isShow = true;
                }
            } else {
                if (rowTypeCode == typeCode && rowStatusCode == statusCode && duration >= rowDuration) {
                    isShow = true;
                }
            }
            if (isShow) {
                row.show();
            } else {
                row.hide();
            }
        });
    }
</script>

<script type="text/javascript">
    $(".clickmee").click(function () {
        $(this).closest('tbody')
            .next('.showhide')
            .toggle('fast');
    });

    $("#example1").dataTable({
        "iDisplayLength": -1,
        "aaSorting": [[2, "desc"]] // Sort by first column descending
    });

    $("#FilterByRequestType").change(function () {
        filterRequest();

    });

    $("#FilterByStatus").change(function () {
        filterRequest();
    });

    $("#FilterByPeriodOfTime").change(function () {
        filterRequest();
    });

    filterRequest();
</script>