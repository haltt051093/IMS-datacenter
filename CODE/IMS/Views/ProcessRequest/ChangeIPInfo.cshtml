@model ProcessRequestChangeIPViewModel
@{
    ViewBag.Title = Pages.ProcessRequestChangeIP;
    ViewBag.PageTitle = Pages.ProcessRequestChangeIP;
    ViewBag.Breadcrumbs = new List<BreadcrumbModel>
    {
        new BreadcrumbModel("Home", "Index", Pages.Home),
        new BreadcrumbModel("ProcessRequest", "Index", Pages.ProcessRequest),
        new BreadcrumbModel("ProcessRequest", "Detail", Pages.ProcessRequestChangeIP)
    };
}

<section class="main-content">
    @using (Html.BeginForm("ProcessRequestChangeIp", "ProcessRequest", FormMethod.Post))
    {
        <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
            @Html.HiddenFor(model => model.SuccessMessage)
            <div class="col-xs-6">
                <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
                    <div class="@Constants.HtmlFormat.FORM_LABEL_X2_CLASS">
                        @Html.LabelFor(model => model.RequestInfo.StatusName, "Status")
                    </div>
                    <div class="@Constants.HtmlFormat.FORM_DETAIL_X2_CLASS">
                        @Html.DisplayFor(model => model.RequestInfo.StatusName, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                    </div>
                </div>
                <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
                    <div class="@Constants.HtmlFormat.FORM_LABEL_X2_CLASS">
                        @Html.LabelFor(model => model.RequestInfo.RequestedTime, "Requested Time")
                    </div>
                    <div class="@Constants.HtmlFormat.FORM_DETAIL_X2_CLASS">
                        @Html.DisplayFor(model => model.RequestInfo.RequestedTime, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                    </div>
                </div>
                <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
                    @if (Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_PENDING && (User.IsInRole("Shift Head") || User.IsInRole("Manager")))
                    {
                        <div class="@Constants.HtmlFormat.FORM_LABEL_X2_CLASS">
                            @Html.LabelFor(model => model.RequestInfo.Assignee)
                        </div>
                        <div class="@Constants.HtmlFormat.FORM_CONTROL_X2_CLASS">
                            @Html.DropDownListFor(model => model.RequestInfo.Assignee, Model.StaffCodeOptions, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                            @Html.ValidationMessageFor(model => model.RequestInfo.Assignee)
                        </div>
                    }

                    @if (Model.RequestInfo.AssigneeName != null)
                    {
                        <div class="@Constants.HtmlFormat.FORM_LABEL_X2_CLASS">
                            @Html.LabelFor(model => model.RequestInfo.Assignee)
                        </div>
                        <div class="@Constants.HtmlFormat.FORM_DETAIL_X2_CLASS">
                            @Html.DisplayFor(model => model.RequestInfo.AssigneeName, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                            @Html.HiddenFor(model => model.RequestInfo.Assignee)
                            @if ((User.IsInRole("Shift Head") || User.IsInRole("Manager")))
                            {
                                if (Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_WAITING || Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_PROCESSING)
                                {
                                    if ((Model.RequestInfo.TaskStatus == Constants.StatusCode.TASK_WAITING || Model.RequestInfo.TaskStatus == Constants.StatusCode.TASK_NOTFINISH) ||
                                        (Model.RequestInfo.TaskStatus == Constants.StatusCode.TASK_DOING && Model.RequestInfo.IsShifthead))
                                    {
                                        <a class="btn btn-primary pull-left" data-toggle="modal" data-target="#Reassigntask"><i class="fa fa-plus"></i>Reassign Task</a>
                                    }
                                }
                            }
                        </div>
                    }

                </div>
                @if (Model.IsAssignedUser)
                {
                    <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
                        <div class="@Constants.HtmlFormat.FORM_LABEL_X2_CLASS">
                            @Html.LabelFor(model => model.RequestInfo.ShiftHead, "Assignor")
                        </div>
                        <div class="@Constants.HtmlFormat.FORM_DETAIL_X2_CLASS">
                            @Html.DisplayFor(model => model.RequestInfo.ShiftHeadName, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                        </div>
                    </div>
                    <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
                        <div class="@Constants.HtmlFormat.FORM_LABEL_X2_CLASS">
                            @Html.LabelFor(model => model.RequestInfo.TaskStatus)
                        </div>
                        @if (Model.RequestInfo.TaskStatus == Constants.StatusCode.TASK_WAITING)
                        {
                            <div class="@Constants.HtmlFormat.FORM_DETAIL_X2_CLASS">
                                <button type="submit" id="btnAcceptTask" name="@Constants.FormAction.ACCEPT_TASK_ACTION" value="@Constants.FormAction.ACCEPT_TASK_ACTION" class="@Constants.HtmlFormat.PRIMARY_BUTTON_CLASS">
                                    Accept Task
                                </button>
                            </div>
                        }
                        @if (Model.RequestInfo.TaskStatus == Constants.StatusCode.TASK_DOING)
                        {
                            <div class="@Constants.HtmlFormat.FORM_DETAIL_X2_CLASS">
                                <div class="@Constants.HtmlFormat.FORM_DETAIL_X2_CLASS">
                                    <a class="btn btn-danger" data-toggle="modal" data-target="#notfinishtask">Not Finish Task</a>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
            <div class="col-xs-6">
                <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
                    <div class="@Constants.HtmlFormat.FORM_LABEL_X2_CLASS">
                        @Html.LabelFor(model => model.CustomerInfo.Customer)
                    </div>
                    <div class="@Constants.HtmlFormat.FORM_DETAIL_X2_CLASS">
                        @Html.ActionLink(Model.CustomerInfo.CustomerName, "ViewProfile", "Account", new { username = Model.CustomerInfo.Customer }, null)
                    </div>
                </div>
                @if (Model.CustomerInfo.Company != null)
                {
                    <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
                        <div class="@Constants.HtmlFormat.FORM_LABEL_X2_CLASS">
                            @Html.LabelFor(model => model.CustomerInfo.Company)
                        </div>
                        <div class="@Constants.HtmlFormat.FORM_DETAIL_X2_CLASS">
                            @Html.DisplayFor(model => model.CustomerInfo.Company, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                        </div>
                    </div>
                }
                <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
                    <div class="@Constants.HtmlFormat.FORM_LABEL_X2_CLASS">
                        @Html.LabelFor(model => model.CustomerInfo.Phone)
                    </div>
                    <div class="@Constants.HtmlFormat.FORM_DETAIL_X2_CLASS">
                        @Html.DisplayFor(model => model.CustomerInfo.Phone, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                    </div>
                </div>
            </div>
        </div>
        <hr />
        <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
            <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
                @Html.LabelFor(model => model.SelectedServer, "Server")
            </div>
            <div class="@Constants.HtmlFormat.FORM_DETAIL_CLASS">
                @Html.ActionLink(Model.SelectedServer, "Detail", "Server", new { code = Model.SelectedServer }, null)
            </div>
        </div>
        <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
            <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
                @Html.LabelFor(model => model.RequestInfo.Description)
            </div>
            <div class="@Constants.HtmlFormat.FORM_DETAIL_CLASS">
                @Html.DisplayFor(model => model.RequestInfo.Description, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
            </div>
        </div>

        <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
            <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
                @Html.LabelFor(model => model.ReturningIPs ,"Change IP")
            </div>
            <div class="@Constants.HtmlFormat.FORM_DETAIL_CLASS">
                @for (int i = 0; i < Model.ReturningIPs.Count; i++)
                {
                    <div class="col-xs-6">
                        @Html.DisplayFor(model => Model.ReturningIPs[i], new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })<br />
                        @Html.HiddenFor(model => model.ReturningIPs[i])
                    </div>
                    if (Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_PROCESSING)
                    {
                        <div class="col-xs-6">
                            @Html.DropDownListFor(model => model.NewIPs[i], Model.NewIPsOptions, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                        </div>
                    }
                    if (Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_DONE)
                    {
                        <div class="col-xs-6">
                            @Html.DisplayFor(model => Model.NewIPs[i], new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })<br />
                        </div>
                    }
                }
            </div>
        </div>
        if (Model.RequestInfo.Reason != null && Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_REJECTED)
        {
            <hr />
            <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
                <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
                    @Html.LabelFor(model => model.RequestInfo.Reason, "Rejeted Reason")
                </div>
                <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
                    @Html.DisplayFor(model => model.RequestInfo.Reason, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                </div>
            </div>
        }
        <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
            <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
            </div>
            <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
                @Html.HiddenFor(model => model.RequestInfo.RequestCode)
                @Html.HiddenFor(model => model.CustomerInfo.Customer)
                @Html.HiddenFor(x => x.RequestInfo.RequestType)
                @Html.HiddenFor(model => model.RequestInfo.Assignee)
                @Html.HiddenFor(x => x.SelectedServer)
                @Html.HiddenFor(model => model.RequestInfo.TaskCode)
                @if (Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_WAITING || Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_PROCESSING)
                {
                    if (Model.RequestInfo.Assignee == Model.CurrentUser && Model.RequestInfo.TaskStatus == Constants.StatusCode.TASK_DOING)
                    {
                        <button type="submit" id="btnApprove" name="@Constants.FormAction.APPROVE_ACTION" value="@Constants.FormAction.OK_ACTION" class="@Constants.HtmlFormat.PRIMARY_BUTTON_CLASS">
                            @Labels.Approve
                        </button>
                        <a class="btn btn-danger" data-toggle="modal" data-target="#Rejectrequest">Reject</a>
                    }
                }
                else if (Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_PENDING && (User.IsInRole("Shift Head") || User.IsInRole("Manager")))
                {
                    <button type="submit" id="btnAccept" name="@Constants.FormAction.ACCEPT_ACTION" value="@Constants.FormAction.OK_ACTION" class="@Constants.HtmlFormat.PRIMARY_BUTTON_CLASS">
                        @Labels.Accept
                    </button>
                    <a class="btn btn-danger" data-toggle="modal" data-target="#Rejectrequest">Reject</a>
                }
            </div>
        </div>

    <!-- Reject request MODAL -->
        <div id="Rejectrequest" class="@Constants.HtmlFormat.MODAL_CLASS" tabindex="-1" role="dialog" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">

                    <div class="modal-header">
                        <div class="@Constants.HtmlFormat.MODAL_HEADER_CLASS">
                            <i class="fa fa-minus-circle"></i>
                            Reject Request
                        </div>
                    </div>
                    <div class="modal-body">
                        <div class="@Constants.HtmlFormat.MODAL_ROW_CLASS">
                            <div class="@Constants.HtmlFormat.MODAL_LABEL_CLASS">
                                @Html.LabelFor(model => model.RequestInfo.Reason)
                            </div>
                            <div class="@Constants.HtmlFormat.MODAL_CONTROL_CLASS">
                                @Html.TextBoxFor(model => model.RequestInfo.Reason, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                                @Html.ValidationMessageFor(model => model.RequestInfo.Reason)
                            </div>
                        </div>

                    </div>
                    <div class="modal-footer">
                        <button type="submit" id="btnReject" name="@Constants.FormAction.REJECT_ACTION" value="@Constants.FormAction.REJECT_ACTION" class="@Constants.HtmlFormat.DANGER_BUTTON_CLASS">
                            @Labels.Reject
                        </button>
                        <button type="button" name="@Constants.FormAction.ACTION_NAME" value="@Constants.FormAction.CANCEL_ACTION" class="@Constants.HtmlFormat.DEFAULT_BUTTON_CLASS"
                                data-dismiss="modal">
                            @Labels.DialogCancel
                        </button>

                    </div>

                </div><!-- /.modal-content -->
            </div><!-- /.modal-dialog -->
        </div><!-- /.modal -->
       <!-- Not Finish Task MODAL -->
        <div id="notfinishtask" class="@Constants.HtmlFormat.MODAL_CLASS" tabindex="-1" role="dialog" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">

                    <div class="modal-header">
                        <div class="@Constants.HtmlFormat.MODAL_HEADER_CLASS">
                            <i class="fa fa-minus-circle"></i>
                            Not Finish Task
                        </div>
                    </div>
                    <div class="modal-body">
                        <div class="@Constants.HtmlFormat.MODAL_ROW_CLASS">
                            <div class="@Constants.HtmlFormat.MODAL_LABEL_CLASS">
                                @Html.LabelFor(model => model.RequestInfo.NotFinishReason)
                            </div>
                            <div class="@Constants.HtmlFormat.MODAL_CONTROL_CLASS">
                                @Html.TextBoxFor(model => model.RequestInfo.NotFinishReason, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                                @Html.ValidationMessageFor(model => model.RequestInfo.NotFinishReason)
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" id="btnReject" name="@Constants.FormAction.NOT_FINISHED_TASK_ACTION" value="@Constants.FormAction.NOT_FINISHED_TASK_ACTION" class="@Constants.HtmlFormat.DANGER_BUTTON_CLASS">
                            Not Finish Task
                        </button>
                        <button type="button" name="@Constants.FormAction.ACTION_NAME" value="@Constants.FormAction.CANCEL_ACTION" class="@Constants.HtmlFormat.DEFAULT_BUTTON_CLASS"
                                data-dismiss="modal">
                            @Labels.DialogCancel
                        </button>

                    </div>

                </div><!-- /.modal-content -->
            </div><!-- /.modal-dialog -->
        </div><!-- /.modal -->
    }
</section>
<!-- Reassign IP MODAL -->
<div id="Reassigntask" class="@Constants.HtmlFormat.MODAL_CLASS" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            @using (Html.BeginForm("ProcessRequestChangeIp", "ProcessRequest", FormMethod.Post))
            {
                <div class="modal-header">
                    <div class="@Constants.HtmlFormat.MODAL_HEADER_CLASS">
                        <i class="fa fa-plus"></i>
                        Change IP
                    </div>
                </div>
                <div class="modal-body">
                    <div class="@Constants.HtmlFormat.MODAL_ROW_CLASS">
                        <div class="@Constants.HtmlFormat.MODAL_LABEL_CLASS">
                            @Html.LabelFor(model => model.RequestInfo.AssigneeName, "Assignee Name")
                        </div>
                        <div class="@Constants.HtmlFormat.MODAL_CONTROL_CLASS">
                            @Html.DisplayFor(model => model.RequestInfo.AssigneeName, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                        </div>
                    </div>
                    <div class="@Constants.HtmlFormat.MODAL_ROW_CLASS">
                        <div class="@Constants.HtmlFormat.MODAL_LABEL_CLASS">
                            @Html.LabelFor(model => model.RequestInfo.TaskStatusName, "Task Status")
                        </div>
                        <div class="@Constants.HtmlFormat.MODAL_CONTROL_CLASS">
                            @Html.DisplayFor(model => model.RequestInfo.TaskStatusName, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                        </div>
                    </div>
                    <div class="@Constants.HtmlFormat.MODAL_ROW_CLASS">
                        <div class="@Constants.HtmlFormat.MODAL_LABEL_CLASS">
                            @Html.LabelFor(model => model.RequestInfo.AssignedStaff, "Assigned Staff")
                        </div>
                        <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
                            @Html.DropDownListFor(model => model.RequestInfo.AssignedStaff, Model.StaffCodeOptions)
                            @Html.ValidationMessageFor(model => model.RequestInfo.AssignedStaff)
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    @Html.HiddenFor(model => model.RequestInfo.Assignee)
                    @Html.HiddenFor(model => model.RequestInfo.RequestCode)
                    @Html.HiddenFor(model => model.RequestInfo.TaskCode)
                    <button type="submit" name="@Constants.FormAction.REASSIGN_ACTION" value="@Constants.FormAction.REASSIGN_ACTION" class="@Constants.HtmlFormat.PRIMARY_BUTTON_CLASS">
                        @Labels.DialogOK
                    </button>
                    <button type="button" name="@Constants.FormAction.ACTION_NAME" value="@Constants.FormAction.CANCEL_ACTION" class="@Constants.HtmlFormat.DEFAULT_BUTTON_CLASS"
                            data-dismiss="modal">
                        @Labels.DialogCancel
                    </button>

                </div>
            }
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div><!-- /.modal -->
<script type="text/javascript">
    $(function () {
        //Get value of selected items
        $("#btnApprove").click(function () {
            var selectedValues = [];
            $("select option:selected").each(function () {
                selectedValues.push($(this).val());
            });
            $('#ips').val(selectedValues);
        });
        var message = $('#SuccessMessage').val();
        if (message) {
            notif({
                msg: "<b>Success! </b>" + message,
                type: "info",
                position: "center"
            });
            $('#SuccessMessage').val("");
        }
    });
</script>
