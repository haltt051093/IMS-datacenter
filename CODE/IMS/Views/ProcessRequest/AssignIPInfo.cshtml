@model ProcessRequestAssignIPViewModel
<section class="content-header">
    <h1>
        Detail Request Assign IP Address
    </h1>
    <ol class="breadcrumb">
        <li><a href="@Url.Action("Index", "Schedule")"><i class="fa fa-dashboard"></i> Home</a></li>
        <li class="active">Detail Request Assign IP Address</li>
    </ol>
</section>
<section class="main-content">
    @using (Html.BeginForm("ProcessRequestAssignIp", "ProcessRequest", FormMethod.Post))
    {
        <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
            <div class="col-xs-6">
                <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
                    <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
                        @Html.LabelFor(model => model.RequestInfo.RequestCode)
                    </div>
                    <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
                        @Html.DisplayFor(model => model.RequestInfo.RequestCode, new {@class = Constants.HtmlFormat.FORM_INNER_CLASS})
                    </div>
                </div>
                <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
                    <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
                        @Html.LabelFor(model => model.RequestInfo.StatusName)
                    </div>
                    <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
                        @Html.DisplayFor(model => model.RequestInfo.StatusName, new {@class = Constants.HtmlFormat.FORM_INNER_CLASS})
                    </div>
                </div>
                <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
                    <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
                        @Html.LabelFor(model => model.RequestInfo.RequestedTime)
                    </div>
                    <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
                        @Html.DisplayFor(model => model.RequestInfo.RequestedTime, new {@class = Constants.HtmlFormat.FORM_INNER_CLASS})
                    </div>
                </div>
                <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
                    <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
                        @Html.LabelFor(model => model.RequestInfo.Assignee)
                    </div>
                    @if (Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_PENDING && (User.IsInRole("Shift Head") || User.IsInRole("Manager")))
                    {
                        <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
                            @Html.DropDownListFor(model => model.RequestInfo.Assignee, Model.StaffCodeOptions, new {@class = Constants.HtmlFormat.FORM_INNER_CLASS})
                            @Html.ValidationMessageFor(model => model.RequestInfo.Assignee)
                        </div>
                    }
                    else
                    {
                        if (Model.RequestInfo.AssigneeName != null)
                        {
                            <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
                                @Html.DisplayFor(model => model.RequestInfo.AssigneeName, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                                @Html.HiddenFor(model => model.RequestInfo.Assignee)
                            </div>
                        }
                    }
                    @if ((Model.RequestInfo.TaskStatus == Constants.StatusCode.TASK_WAITING ||
                         Model.RequestInfo.TaskStatus == Constants.StatusCode.TASK_NOTFINISH) && (User.IsInRole("Shift Head") || User.IsInRole("Manager")))
                    {
                        <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
                            <a class="btn btn-primary pull-left" data-toggle="modal" data-target="#Reassigntask"><i class="fa fa-plus"></i>Reassign Task</a>
                        </div>
                    }
                </div>
            </div>
            <div class="col-xs-6">
                <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
                    <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
                        @Html.LabelFor(model => model.CustomerInfo.Customer)
                    </div>
                    <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
                        @Html.ActionLink(Model.CustomerInfo.CustomerName, "ViewProfile", "Account", new {username = Model.CustomerInfo.Customer}, null)
                    </div>
                </div>
                @if (Model.CustomerInfo.Company != null)
                {
                    <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
                        <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
                            @Html.LabelFor(model => model.CustomerInfo.Company)
                        </div>
                        <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
                            @Html.DisplayFor(model => model.CustomerInfo.Company, new {@class = Constants.HtmlFormat.FORM_INNER_CLASS})
                        </div>
                    </div>
                }
                <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
                    <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
                        @Html.LabelFor(model => model.CustomerInfo.Phone)
                    </div>
                    <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
                        @Html.DisplayFor(model => model.CustomerInfo.Phone, new {@class = Constants.HtmlFormat.FORM_INNER_CLASS})
                    </div>
                </div>
            </div>
        </div>
        <hr/>
        <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
            <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
                @Html.LabelFor(model => model.NumberOfIP)
            </div>
            <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
                @Html.DisplayFor(model => model.NumberOfIP, new {@class = Constants.HtmlFormat.FORM_INNER_CLASS})
                @Html.HiddenFor(model => model.NumberOfIP)
            </div>
        </div>
        <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
            <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
                @Html.LabelFor(model => model.SelectedServer)
            </div>
            <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
                @Html.ActionLink(Model.SelectedServer, "Detail", "Server",
                    new {code = Model.SelectedServer}, null)
                @Html.HiddenFor(model => model.SelectedServer)
            </div>
        </div>
        <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
            <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
                @Html.LabelFor(model => model.RequestInfo.Description)
            </div>
            <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
                @Html.DisplayFor(model => model.RequestInfo.Description, new {@class = Constants.HtmlFormat.FORM_INNER_CLASS})
            </div>
        </div>
        if (Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_PROCESSING)
        {
            <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
                <div class="col-xs-6">
                    <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
                        @Html.LabelFor(model => model.SelectedIps)
                    </div>
                    <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
                        @Html.ListBoxFor(model => model.SelectedIps, new MultiSelectList(Model.IpSelectListItems, "Value", "Text"),
                            new {SelectionMode = "multiple", @id = "availableIps", rows = 30, @class = Constants.HtmlFormat.FORM_INNER_CLASS})
                        @Html.ValidationMessageFor(model => model.SelectedIps)
                    </div>
                </div>
                <div class="col-xs-6" style="color: #f20054">
                    <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
                        @Html.LabelFor(model => model.IPs)
                    </div>
                    <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
                        @Html.ListBoxFor(model => model.IPs, Model.SelectedIps, new {@id = "selectedIps", rows = 30, @class = Constants.HtmlFormat.FORM_INNER_CLASS})
                        @Html.ValidationMessageFor(model => model.IPs)
                    </div>
                </div>
            </div>
        }
        if (Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_DONE)
        {
            <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
                <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
                    @Html.LabelFor(model => model.IPs)
                </div>
                <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
                    @foreach (var item in Model.IPs)
                    {
                        @Html.DisplayFor(model => item, new {@class = Constants.HtmlFormat.FORM_INNER_CLASS})
                        <br/>
                    }
                </div>
            </div>
        }
        if (Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_CANCELLED)
        {
            @ViewBag.Message
        }
        if (Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_REJECTED)
        {
            @ViewBag.Message
        }
        <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
            <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
            </div>
            @Html.HiddenFor(model => model.RequestInfo.RequestCode)
            @Html.HiddenFor(model => model.CustomerInfo.Customer)
            @Html.HiddenFor(x => x.RequestInfo.RequestType)
            @Html.HiddenFor(model => model.RequestInfo.Assignee)
            <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
                @if (Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_WAITING ||
                     Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_PROCESSING)
                {
                    if (Model.RequestInfo.Assignee == Model.CurrentUser && Model.RequestInfo.TaskStatus == Constants.StatusCode.TASK_DOING)
                    {
                        <button type="submit" id="btnApprove" name="@Constants.FormAction.APPROVE_ACTION" value="@Constants.FormAction.OK_ACTION" class="@Constants.HtmlFormat.PRIMARY_BUTTON_CLASS">
                            @Labels.Approve
                        </button>
                        <button type="submit" id="btnReject" name="@Constants.FormAction.REJECT_ACTION" value="@Constants.FormAction.REJECT_ACTION" class="@Constants.HtmlFormat.DANGER_BUTTON_CLASS">
                            @Labels.Reject
                        </button>
                    }
                }
                else if (Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_PENDING && (User.IsInRole("Shift Head") || User.IsInRole("Manager")))
                {
                    <button type="submit" id="btnAccept" name="@Constants.FormAction.ACCEPT_ACTION" value="@Constants.FormAction.OK_ACTION" class="@Constants.HtmlFormat.PRIMARY_BUTTON_CLASS">
                        @Labels.Accept
                    </button>
                    <button type="submit" id="btnReject" name="@Constants.FormAction.REJECT_ACTION" value="@Constants.FormAction.REJECT_ACTION" class="@Constants.HtmlFormat.DANGER_BUTTON_CLASS">
                        @Labels.Reject
                    </button>
                }
            </div>
        </div>
    }
</section>
<!-- Reassign IP MODAL -->
<div id="Reassigntask" class="@Constants.HtmlFormat.MODAL_CLASS" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            @using (Html.BeginForm("ProcessRequestAssignIp", "ProcessRequest", FormMethod.Post))
            {
                <div class="modal-header">
                    <div class="@Constants.HtmlFormat.MODAL_HEADER_CLASS"><i class="fa fa-plus"></i>
                    Reassign Task
                    </div>
                </div>
                <div class="modal-body">
                    <div class="@Constants.HtmlFormat.MODAL_ROW_CLASS">
                        <div class="@Constants.HtmlFormat.MODAL_LABEL_CLASS">
                            @Html.LabelFor(model => model.RequestInfo.AssigneeName)
                            @Html.HiddenFor(model => model.RequestInfo.Assignee)
                            @Html.HiddenFor(model => model.RequestInfo.RequestCode) 
                        </div>
                        <div class="@Constants.HtmlFormat.MODAL_CONTROL_CLASS">
                            @Html.DisplayFor(model => model.RequestInfo.AssigneeName, new {@class = Constants.HtmlFormat.FORM_INNER_CLASS})
                        </div>
                    </div>
                    <div class="@Constants.HtmlFormat.MODAL_ROW_CLASS">
                        <div class="@Constants.HtmlFormat.MODAL_LABEL_CLASS">
                            @Html.LabelFor(model => model.RequestInfo.TaskStatusName)
                        </div>
                        <div class="@Constants.HtmlFormat.MODAL_CONTROL_CLASS">
                            @Html.DisplayFor(model => model.RequestInfo.TaskStatusName, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                        </div>
                    </div>
                    <div class="@Constants.HtmlFormat.MODAL_ROW_CLASS">
                        <div class="@Constants.HtmlFormat.MODAL_LABEL_CLASS">
                            @Html.LabelFor(model => model.RequestInfo.AssignedStaff)
                        </div>
                        <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
                            @Html.DropDownListFor(model => model.RequestInfo.AssignedStaff, Model.StaffCodeOptions, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                            @Html.ValidationMessageFor(model => model.RequestInfo.AssignedStaff)
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" name="@Constants.FormAction.REASSIGN_ACTION" value="@Constants.FormAction.REASSIGN_ACTION" class="@Constants.HtmlFormat.PRIMARY_BUTTON_CLASS">
                        @Labels.DialogOK
                    </button>
                    <button type="button" name="@Constants.FormAction.ACTION_NAME" value="@Constants.FormAction.CANCEL_ACTION" class="@Constants.HtmlFormat.DEFAULT_BUTTON_CLASS"
                            data-dismiss="modal">
                        @Labels.DialogCancel
                    </button>

                </div>
            }
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div><!-- /.modal -->
<script type="text/javascript">
    $(function () {
        $('#btnApprove').on('click', function () {
            $('#selectedIps').find('option').attr('selected', true);
            $('#IPs').find('option').attr('selected', true);
        });
        $('#availableIps').dblclick(function () {
            var pass = $('#availableIps').val();
            $('#selectedIps').append('<option value="' + pass + '">' + pass + '</option>');
            $("[id*=availableIps] option:selected").remove();
            return false;
        });

        $('#selectedIps').dblclick(function () {
            //var count = $('#selectedIps option:selected').length;
            //args.IsValid = count > 0 && count <= 5;
            var pass = $('#selectedIps').val();
            var ipNumber = $('#IpNumber').val();
            $('#availableIps').append('<option value="' + pass + '">' + pass + '</option>');
            $("[id*=selectedIps] option:selected").remove();
            // Check if the parent has reached the limit of selected items.
            if ($(this).parent().val().length >= ipNumber) {
                // Removed the selected attribute from this option.
                $(this).remdaoveAttr("selected");
                //remove gia tri duoc chon khoi list
            }
        });
    });

</script>