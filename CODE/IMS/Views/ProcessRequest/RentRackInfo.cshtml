@model ProcessRequestRentRackViewModel
@{
    ViewBag.Title = Pages.ProcessRequestRentRack;
    ViewBag.PageTitle = Pages.ProcessRequestRentRack;
    ViewBag.Breadcrumbs = new List<BreadcrumbModel>
    {
        new BreadcrumbModel("Home", "Index", Pages.Home),
        new BreadcrumbModel("ProcessRequest", "Index", Pages.ProcessRequest),
        new BreadcrumbModel("ProcessRequest", "Detail", Pages.ProcessRequestRentRack)
    };
}
<section class="main-content">
    @using (Html.BeginForm("ProcessRequestRentRack", "ProcessRequest", FormMethod.Post))
    {
        <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
            @Html.HiddenFor(model => model.SuccessMessage)
            @Html.HiddenFor(model => model.ErrorMessage)
            <div class="col-xs-4">
                <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
                    <div class="@Constants.HtmlFormat.FORM_LABEL_X3_CLASS">
                        @Html.LabelFor(model => model.RequestInfo.StatusName)
                    </div>
                    <div class="@Constants.HtmlFormat.FORM_DETAIL_X3_CLASS">
                        @Html.DisplayFor(model => model.RequestInfo.StatusName, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                    </div>
                </div>
                <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
                    <div class="@Constants.HtmlFormat.FORM_LABEL_X3_CLASS">
                        @Html.LabelFor(model => model.RequestInfo.RequestedTime)
                    </div>
                    <div class="@Constants.HtmlFormat.FORM_DETAIL_X3_CLASS">
                        @Html.DisplayFor(model => model.RequestInfo.RequestedTime, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                    </div>
                </div>
                <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
                    <div class="@Constants.HtmlFormat.FORM_LABEL_X3_CLASS">
                        @Html.LabelFor(model => model.RequestInfo.Description)
                    </div>
                    <div class="@Constants.HtmlFormat.FORM_DETAIL_X3_CLASS">
                        @Html.DisplayFor(model => model.RequestInfo.Description, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                    </div>
                </div>
            </div>
            <div class="col-xs-4">
                <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
                    <div class="@Constants.HtmlFormat.FORM_LABEL_X2_CLASS">
                        @Html.LabelFor(model => model.CustomerInfo.Customer)
                    </div>
                    <div class="@Constants.HtmlFormat.FORM_DETAIL_X2_CLASS">
                        @Html.ActionLink(Model.CustomerInfo.CustomerName, "ViewProfile", "Account", new { username = Model.CustomerInfo.Customer }, null)
                    </div>
                </div>
                @if (Model.CustomerInfo.Company != null)
                {
                    <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
                        <div class="@Constants.HtmlFormat.FORM_LABEL_X2_CLASS">
                            @Html.LabelFor(model => model.CustomerInfo.Company)
                        </div>
                        <div class="@Constants.HtmlFormat.FORM_DETAIL_X2_CLASS">
                            @Html.DisplayFor(model => model.CustomerInfo.Company, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                        </div>
                    </div>
                }
                <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
                    <div class="@Constants.HtmlFormat.FORM_LABEL_X2_CLASS">
                        @Html.LabelFor(model => model.CustomerInfo.Phone)
                    </div>
                    <div class="@Constants.HtmlFormat.FORM_DETAIL_X2_CLASS">
                        @Html.DisplayFor(model => model.CustomerInfo.Phone, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                    </div>
                </div>
            </div>
            <div class="col-xs-4">
                @if (Model.RequestInfo.ShiftHeadName != null)
                {
                    <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
                        <div class="@Constants.HtmlFormat.FORM_LABEL_X2_CLASS">
                            @Html.LabelFor(model => model.RequestInfo.ShiftHead, "Assignor")
                        </div>
                        <div class="@Constants.HtmlFormat.FORM_DETAIL_X2_CLASS">
                            @Html.DisplayFor(model => model.RequestInfo.ShiftHeadName, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                        </div>
                    </div>
                }
                <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
                    @if (Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_PENDING && (User.IsInRole("Shift Head") || User.IsInRole("Manager")))
                    {
                        <div class="@Constants.HtmlFormat.FORM_LABEL_X2_CLASS">
                            @Html.LabelFor(model => model.RequestInfo.Assignee)
                        </div>
                        <div class="@Constants.HtmlFormat.FORM_CONTROL_X2_CLASS">
                            @Html.DropDownListFor(model => model.RequestInfo.Assignee, Model.StaffCodeOptions, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                            @Html.ValidationMessageFor(model => model.RequestInfo.Assignee)
                        </div>
                    }
                    @if (Model.RequestInfo.AssigneeName != null)
                    {
                        <div class="@Constants.HtmlFormat.FORM_LABEL_X2_CLASS">
                            @Html.LabelFor(model => model.RequestInfo.Assignee)
                        </div>
                        <div class="@Constants.HtmlFormat.FORM_DETAIL_X2_CLASS">
                            @Html.DisplayFor(model => model.RequestInfo.AssigneeName, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                            <br />
                            @Html.HiddenFor(model => model.RequestInfo.Assignee)
                            @if ((User.IsInRole("Shift Head") || User.IsInRole("Manager")))
                            {
                                if (Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_WAITING || Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_PROCESSING)
                                {
                                    if ((Model.RequestInfo.TaskStatus == Constants.StatusCode.TASK_WAITING || Model.RequestInfo.TaskStatus == Constants.StatusCode.TASK_NOTFINISH) ||
                                        (Model.RequestInfo.TaskStatus == Constants.StatusCode.TASK_DOING && Model.RequestInfo.IsShifthead))
                                    {
                                        <a href="#" data-target="#Reassigntask" id="reassign">[Reassign Task]</a>
                                    }
                                }
                            }
                        </div>
                    }
                    @if (Model.RequestInfo.AssigneeName == null && Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_CANCELLED)
                    {
                        <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
                            <div class="@Constants.HtmlFormat.FORM_LABEL_X2_CLASS">
                                @Html.LabelFor(model => model.RequestInfo.Assignee)
                            </div>
                            <div class="@Constants.HtmlFormat.FORM_DETAIL_X2_CLASS">
                                @Html.Raw("[Not Assigned]")
                            </div>
                        </div>
                    }
                </div>
                @if (Model.IsAssignedUser)
                {
                    <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
                        <div class="@Constants.HtmlFormat.FORM_LABEL_X2_CLASS">
                            @Html.LabelFor(model => model.RequestInfo.TaskStatus, "Action")
                        </div>
                        @if (Model.RequestInfo.TaskStatus == Constants.StatusCode.TASK_WAITING)
                        {
                            <div class="@Constants.HtmlFormat.FORM_DETAIL_X2_CLASS">
                                @Html.ActionLink("[Accept Task]", "AcceptTask", "Task",
                    new { requestCode = Model.RequestInfo.RequestCode, taskCode = Model.RequestInfo.TaskCode }, null)
                            </div>
                        }
                        @if (Model.RequestInfo.TaskStatus == Constants.StatusCode.TASK_DOING)
                        {
                            <div class="@Constants.HtmlFormat.FORM_DETAIL_X2_CLASS">
                                <a href="#" data-target="#notfinishtask" id="notfinish">[Not Finish Task]</a>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
        <hr />
        <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
            <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
                @Html.LabelFor(model => model.RackNumbers, new { data_racknumbers = @Model.RackNumbers })
            </div>
            <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
                @Html.DisplayFor(model => model.RackNumbers, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
            </div>
        </div>
        if (Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_PROCESSING)
        {
            if (Model.RequestInfo.Assignee == Model.CurrentUser && Model.RequestInfo.TaskStatus == Constants.StatusCode.TASK_DOING)
            {
                <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
                    <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
                        @Html.LabelFor(model => model.SelectedRow, "Select racks")
                    </div>
                    <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
                        @Html.DropDownListFor(m => m.SelectedRow, Model.ListRows, "Select All", new { @id = "selectedRow", @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                        @Html.ValidationMessageFor(model => model.SelectedRow)
                        <table id="masterTable" class="@Constants.HtmlFormat.DATATABLE_CLASS">
                            <thead>
                                <tr class="@Constants.HtmlFormat.DATATABLE_HEADER_CLASS">
                                    <th>
                                        <input id="checkAll" type="checkbox" />
                                    </th>
                                    <th>@Labels.Rack</th>
                                </tr>
                            </thead>
                            <tbody>
                                @for (int i = 0; i < Model.listRackByRows.Count; i++)
                                {
                                    <tr class="check currentRacks" row-code="@Model.listRackByRows[i].RowName">
                                        <td>
                                            @Html.CheckBoxFor(modelItem => modelItem.listRackByRows[i].Checked)
                                        </td>
                                        <td>
                                            @Html.DisplayFor(model => Model.listRackByRows[i].RackName, new { @class = "form-control" })
                                            @Html.HiddenFor(model => Model.listRackByRows[i].RackName, new { @class = "form-control" })
                                            @Html.HiddenFor(model => Model.listRackByRows[i].RackCode, new { @class = "form-control" })
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        @*<div id="notEnough" class="alert alert-warning alert-dismissable" style="display: none">
                                <i class="fa fa-warning"></i>
                                <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
                                <b>Alert!</b> Rack is out of stock! Please Add more.
                            </div>*@
                    </div>
                </div>
            }
        }
        if (Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_DONE)
        {
            <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
                <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
                    @Html.LabelFor(model => model.RentedRacks)
                </div>
                <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
                    @foreach (var item in Model.RentedRacks)
                    {
                    @Html.DisplayFor(model => item, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                    <br />
                    }
                </div>
            </div>
        }
        if (Model.RequestInfo.Reason != null && Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_REJECTED)
        {
            <hr />
            <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
                <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
                    @Html.LabelFor(model => model.RequestInfo.Reason)
                </div>
                <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
                    @Html.DisplayFor(model => model.RequestInfo.Reason, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                </div>
            </div>
        }
        <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
            <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
            </div>
            @Html.HiddenFor(model => model.RequestInfo.RequestCode)
            @Html.HiddenFor(model => model.CustomerInfo.Customer)
            @Html.HiddenFor(model => model.RequestInfo.Assignee)
            @Html.HiddenFor(model => model.RequestInfo.TaskCode)
            <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
                @if (Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_WAITING || Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_PROCESSING)
                {
                    if (Model.RequestInfo.Assignee == Model.CurrentUser && Model.RequestInfo.TaskStatus == Constants.StatusCode.TASK_DOING)
                    {
                        <button type="submit" id="btnApprove" name="@Constants.FormAction.APPROVE_ACTION" value="@Constants.FormAction.OK_ACTION" class="@Constants.HtmlFormat.PRIMARY_BUTTON_CLASS">
                            @Labels.Approve
                        </button>
                        <a class="btn btn-danger" data-toggle="modal" data-target="#Rejectrequest">Reject</a>
                    }
                }
                else if (Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_PENDING && (User.IsInRole("Shift Head") || User.IsInRole("Manager")))
                {
                    <button type="submit" id="btnAccept" name="@Constants.FormAction.ACCEPT_ACTION" value="@Constants.FormAction.OK_ACTION" class="@Constants.HtmlFormat.PRIMARY_BUTTON_CLASS">
                        @Labels.Accept
                    </button>
                    <a class="btn btn-danger" data-toggle="modal" data-target="#Rejectrequest">Reject</a>
                }
            </div>
        </div>

                <!-- Reject request MODAL -->
        <div id="Rejectrequest" class="@Constants.HtmlFormat.MODAL_CLASS" tabindex="-1" role="dialog" aria-hidden="true">
            <div class="modal-dialog" style="width: 400px">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="@Constants.HtmlFormat.MODAL_HEADER_CLASS">
                            <i class="fa fa-minus-circle"></i>
                            Reject Request
                        </div>
                    </div>
                    <div class="modal-body">
                        <div class="@Constants.HtmlFormat.MODAL_ROW_CLASS">
                            <div class="@Constants.HtmlFormat.MODAL_LABEL_CLASS">
                                @Html.LabelFor(model => model.RequestInfo.Reason,"Reason")
                            </div>
                            <div class="@Constants.HtmlFormat.MODAL_CONTROL_CLASS">
                                @Html.TextAreaFor(model => model.RequestInfo.Reason, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                                @Html.ValidationMessageFor(model => model.RequestInfo.Reason)
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" id="btnReject" name="@Constants.FormAction.REJECT_ACTION" value="@Constants.FormAction.REJECT_ACTION" class="@Constants.HtmlFormat.PRIMARY_BUTTON_CLASS">
                            @Labels.OK
                        </button>
                        <button type="button" name="@Constants.FormAction.ACTION_NAME" value="@Constants.FormAction.CANCEL_ACTION" class="@Constants.HtmlFormat.DEFAULT_BUTTON_CLASS"
                                data-dismiss="modal">
                            @Labels.DialogCancel
                        </button>
                    </div>
                </div><!-- /.modal-content -->
            </div><!-- /.modal-dialog -->
        </div><!-- /.modal -->
    }
</section>
<!-- Reassign IP MODAL -->
<div id="Reassigntask" class="@Constants.HtmlFormat.MODAL_CLASS" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog" style="width: 400px">
        <div class="modal-content">
            @using (Html.BeginForm("ProcessRequestRentRack", "ProcessRequest", FormMethod.Post))
            {
        <div class="modal-header">
            <div class="@Constants.HtmlFormat.MODAL_HEADER_CLASS">
                <i class="fa fa-plus"></i>
                Reassign Task
            </div>
        </div>
        <div class="modal-body">
            <div class="@Constants.HtmlFormat.MODAL_ROW_CLASS">
                <div class="col-xs-4 tf-form-label">
                    @Html.LabelFor(model => model.RequestInfo.AssigneeName, "Assigned Staff")
                </div>
                <div class="col-xs-8 tf-form-control">
                    @Html.DisplayFor(model => model.RequestInfo.AssigneeName, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                </div>
            </div>
            <div class="@Constants.HtmlFormat.MODAL_ROW_CLASS">
                <div class="col-xs-4 tf-form-label">
                    @Html.LabelFor(model => model.RequestInfo.TaskStatusName)
                </div>
                <div class="col-xs-8 tf-form-control">
                    @Html.DisplayFor(model => model.RequestInfo.TaskStatusName, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                </div>
            </div>
            <div class="@Constants.HtmlFormat.MODAL_ROW_CLASS">
                <div class="col-xs-4 tf-form-label">
                    @Html.LabelFor(model => model.RequestInfo.AssignedStaff, "Assignee")
                </div>
                <div class="col-xs-8 tf-form-control">
                    @Html.DropDownListFor(model => model.RequestInfo.AssignedStaff, Model.StaffCodeOptions, new { @style = "width: 200px;", @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                    @*@Html.ValidationMessageFor(model => model.RequestInfo.AssignedStaff)*@
                </div>
            </div>
        </div>
        <div class="modal-footer">
            @Html.HiddenFor(model => model.RequestInfo.Assignee)
            @Html.HiddenFor(model => model.RequestInfo.RequestCode)
            @Html.HiddenFor(model => model.RequestInfo.TaskCode)
            @Html.HiddenFor(model => model.RequestInfo.TaskStatus)
            <button type="submit" name="@Constants.FormAction.REASSIGN_ACTION" value="@Constants.FormAction.REASSIGN_ACTION" class="@Constants.HtmlFormat.PRIMARY_BUTTON_CLASS">
                @Labels.OK
            </button>
            <button type="button" name="@Constants.FormAction.ACTION_NAME" value="@Constants.FormAction.CANCEL_ACTION" class="@Constants.HtmlFormat.DEFAULT_BUTTON_CLASS"
                    data-dismiss="modal">
                @Labels.DialogCancel
            </button>

        </div>
            }
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div><!-- /.modal -->
<!-- Not Finish Task MODAL -->
<div id="notfinishtask" class="@Constants.HtmlFormat.MODAL_CLASS" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog" style="width: 400px">
        <div class="modal-content">
            @using (Html.BeginForm("NotFinishTask", "Task", FormMethod.Post))
            {
        <div class="modal-header">
            <div class="@Constants.HtmlFormat.MODAL_HEADER_CLASS">
                <i class="fa fa-minus-circle"></i>
                Not Finish Task
            </div>
        </div>
        <div class="modal-body">
            <div class="@Constants.HtmlFormat.MODAL_ROW_CLASS">
                <div class="@Constants.HtmlFormat.MODAL_LABEL_CLASS">
                    @Html.LabelFor(model => model.RequestInfo.NotFinishReason)
                </div>
                <div class="@Constants.HtmlFormat.MODAL_CONTROL_CLASS">
                    <TEXTAREA NAME="reason" COLS=35 ROWS=2></TEXTAREA>
                    <input type="hidden" name="taskcode" value="@Model.RequestInfo.TaskCode" />
                    <input type="hidden" name="requestcode" value="@Model.RequestInfo.RequestCode" />
                </div>
            </div>
        </div>
        <div class="modal-footer">
            <button type="submit" id="btnReject" name="@Constants.FormAction.NOT_FINISHED_TASK_ACTION" value="@Constants.FormAction.NOT_FINISHED_TASK_ACTION" class="@Constants.HtmlFormat.PRIMARY_BUTTON_CLASS">
                @Labels.OK
            </button>
            <button type="button" name="@Constants.FormAction.ACTION_NAME" value="@Constants.FormAction.CANCEL_ACTION" class="@Constants.HtmlFormat.DEFAULT_BUTTON_CLASS"
                    data-dismiss="modal">
                @Labels.DialogCancel
            </button>
        </div>
            }
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div><!-- /.modal -->
<script type="text/javascript">
    $(document).ready(function () {
        var alertTemp = '';
        $('#masterTable').dataTable({
            dom: 't',
            ordering: false,
            searching: false
        });
        (function () {
            var chkNum = $('.currentRacks').length;
            //alert(chkNum);
            var mn = $('[data-racknumbers]').attr('data-racknumbers');
            if (mn > chkNum) {
                $('#notEnough').delay(2000).fadeIn();
                $('#btnApprove').attr("disabled", "disabled");
            }
            //alert(mn);
        })();
        var message = $('#SuccessMessage').val();
        var err = $('#ErrorMessage').val();
        if (message) {
            notif({
                msg: "<b>Success! </b>" + message,
                type: "info",
                position: "center"
            });
            $('#SuccessMessage').val("");
        }
        if (err) {
            notif({
                msg: err,
                type: "error",
                position: "center"
            });
            $('#ErrorMessage').val("");
        }
        $("#checkAll").change(function () {
            var state = $('#checkAll').is(':checked');
            $('tr.check input[type="checkbox"]').prop('checked', state);
        });

        $("#selectedRow").change(function () {
            var rowCode = $("#selectedRow").val();
            if (rowCode == null || rowCode === '') {
                $('#masterTable tbody tr').show();
            } else {
                $('#masterTable tbody tr').hide();
                $('#masterTable tbody tr[row-code="' + rowCode + '"]').show();
            }
        });
        $('#reassign').click(function () {
            $('#Reassigntask').modal('show');
        });

        $('#notfinish').click(function () {
            $('#notfinishtask').modal('show');
        });
    });
</script>