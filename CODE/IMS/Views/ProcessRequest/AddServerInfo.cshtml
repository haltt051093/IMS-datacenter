@model ProcessRequestAddServerViewModel
@{
    ViewBag.Title = "Request Add Server";
}

<section class="content-header">
    <h1>
        Detail Request Add New Server
    </h1>
    <ol class="breadcrumb">
        <li><a href="@Url.Action("Index", "Schedule" )">><i class="fa fa-dashboard"></i> Home</a></li>
        <li class="active">Detail Request Add New Server</li>
    </ol>
</section>
<section class="main-content">
    @using (Html.BeginForm("ProcessRequestAddServer", "ProcessRequest", FormMethod.Post))
            {
        <div class="row">
            <div class="col-xs-6">
                <div class="row dl-horizontal">
                    <div class="col-xs-4">
                        Request Code
                    </div>
                    <div class="col-xs-8">
                        @Html.DisplayFor(model => model.RequestInfo.RequestCode, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                </div>
                <div class="row">
                    <div class="col-xs-4">
                        Current Status
                    </div>
                    <div class="col-xs-8">
                        @Html.DisplayFor(model => model.RequestInfo.StatusName, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                </div>
                <div class="row">
                    <div class="col-xs-4">
                        Requested Time
                    </div>
                    <div class="col-xs-8">
                        @Html.DisplayFor(model => model.RequestInfo.RequestedTime, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                </div>
                <div class="row">
                    <div class="col-xs-4">
                        Assignee
                    </div>
                    @if (Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_WAITING ||
                    Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_PROCESSING)
                    {
                        <div class="col-xs-8">
                            @Html.DropDownListFor(model => model.RequestInfo.StaffCode, Model.StaffCodeOptions, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                        </div>
                    }
                    else
                    {
                        <div class="col-xs-8">
                            @Html.ActionLink(Model.RequestInfo.StaffName, "ViewProfile", "Account",
                                new { username = Model.RequestInfo.StaffCode }, null)
                            @Html.HiddenFor(model => model.RequestInfo.StaffCode, new { @class = "form-control" })
                        </div>
                    }
                </div>
            </div>
            <div class="col-xs-6">
                <div class="row">
                    <div class="col-xs-4">
                        Customer
                    </div>
                    <div class="col-xs-8">
                        @Html.ActionLink(Model.CustomerInfo.CustomerName, "ViewProfile", "Account", new { username = Model.CustomerInfo.Customer }, null)
                    </div>
                </div>
                @if (Model.CustomerInfo.Company != null)
                {
                    <div class="row">
                        <div class="col-xs-4">
                            Company Name
                        </div>
                        <div class="col-xs-8">
                            @Html.DisplayFor(model => model.CustomerInfo.Company, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                    </div>
                }
                <div class="row">
                    <div class="col-xs-4">
                        Phone Number
                    </div>
                    <div class="col-xs-8">
                        @Html.DisplayFor(model => model.CustomerInfo.Phone, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                </div>
            </div>
        </div>
        <hr />
        <div class="row">
            <div class="col-xs-12">
                <table id="" class="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th>No</th>
                            <th>Power</th>
                            <th>Size</th>
                            <th>Bandwidth</th>
                            <th>Serial Number</th>
                            <th>Part Number</th>
                            @if (Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_WAITING || Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_PROCESSING || Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_DONE)
                            {
                                <th>Default IP</th>
                                <th>Location</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < Model.Servers.Count; i++)
                        {
                            <tr>
                                <td>
                                    @Html.Raw(i + 1)
                                </td>
                                <td>
                                    @Html.DisplayFor(model => Model.Servers[i].Power, new { htmlAttributes = new { @class = "form-control" } })W
                                    @Html.HiddenFor(modelItem => modelItem.Servers[i].Power)
                                </td>
                                <td>
                                    @Html.DisplayFor(model => Model.Servers[i].Size, new { htmlAttributes = new { @class = "form-control" } })U
                                    @Html.HiddenFor(modelItem => modelItem.Servers[i].Size)
                                </td>
                                <td>
                                    @Html.DisplayFor(model => Model.Servers[i].Bandwidth, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.HiddenFor(modelItem => modelItem.Servers[i].Bandwidth)
                                </td>
                                <td>
                                    @Html.DisplayFor(model => Model.Servers[i].SerialNumber, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.HiddenFor(modelItem => modelItem.Servers[i].SerialNumber)
                                </td>
                                <td>
                                    @Html.DisplayFor(model => Model.Servers[i].PartNumber, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.HiddenFor(modelItem => modelItem.Servers[i].PartNumber)
                                </td>
                                @if (Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_WAITING || Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_PROCESSING || Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_DONE)
                                {
                                    <td>
                                        @if (Model.RequestInfo.StatusCode != Constants.StatusCode.REQUEST_DONE)
                                        {
                                            @Html.ActionLink("Assign Default IP", "AssignIP", "IP", new { rType = Model.RequestInfo.RequestType, rCode = Model.RequestInfo.RequestCode, OldIP = Model.Servers[i].DefaultIP, ServerCode = Model.Servers[i].ServerCode }, null)
                                        }
                                        @Html.DisplayFor(model => Model.Servers[i].DefaultIP, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.HiddenFor(modelItem => modelItem.Servers[i].DefaultIP)
                                    </td>
                                    <td>
                                        <input type="hidden" value="true" name="location" />
                                        @if (Model.RequestInfo.StatusCode != Constants.StatusCode.REQUEST_DONE)
                                        {

                                            @Html.ActionLink("Assign Location", "AssignLocation", "Location", new { rType = Model.RequestInfo.RequestType, rCode = Model.RequestInfo.RequestCode, ServerCode = Model.Servers[i].ServerCode, Size = Model.Servers[i].Size }, null)



                                        }
                                        @foreach (var item in Model.Servers[i].ServerLocation)
                                        {<div>
                                            @Html.DisplayFor(model => item.RackName) U @Html.DisplayFor(model => item.RackUnit)
                                        </div>

                                        }

                                    </td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="row">
            <div class="col-xs-12">
                @Html.HiddenFor(model => model.RequestInfo.RequestCode)
                @Html.HiddenFor(model => model.CustomerInfo.Customer)
                @Html.HiddenFor(x => x.RequestInfo.RequestType)
                @Html.HiddenFor(model => model.RequestInfo.StaffCode)
                @if (Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_WAITING ||
Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_PROCESSING)
                {
                    //if (Model.StaffCode == Model.Username)
                    //{
                    <button type="submit" class="btn btn-primary" name="Approve">Approve</button>
                    <button type="submit" class="btn btn-danger" name="Reject">Reject</button>
                    //}
                }
                else if (Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_PENDING)
                {
                    <button type="submit" class="btn btn-primary" name="Accept">Accept</button>
                    <button type="submit" id="btnReject" name="@Constants.FormAction.REJECT_ACTION" value="@Constants.FormAction.REJECT_ACTION" class="@Constants.HtmlFormat.DANGER_BUTTON_CLASS">
                        @Labels.Reject
                    </button>
                }
            </div>
        </div>
    }
</section>
