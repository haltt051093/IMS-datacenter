@model ProcessRequestReturnIPViewModel
@{
    ViewBag.Title = "RequestReturnIPInfo";
}

<section class="content-header">
    <h1>
        Detail Request Return IP Address
    </h1>
    <ol class="breadcrumb">
        <li><a href="@Url.Action("Index", "Schedule")"><i class="fa fa-dashboard"></i> Home</a></li>
        <li class="active">Detail Request Return IP Address</li>
    </ol>
</section>
<section class="main-content">
    @using (Html.BeginForm("ProcessRequesReturnIp", "ProcessRequest", FormMethod.Post))
            {
        <div class="row">
            <div class="col-xs-6">
                <div class="row dl-horizontal">
                    <div class="col-xs-4">
                        Request Code
                    </div>
                    <div class="col-xs-8">
                        @Html.DisplayFor(model => model.RequestInfo.RequestCode, new { @class = "form-control" })
                    </div>
                </div>
                <div class="row">
                    <div class="col-xs-4">
                        Current Status
                    </div>
                    <div class="col-xs-8">
                        @Html.DisplayFor(model => model.RequestInfo.StatusName, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                </div>
                <div class="row">
                    <div class="col-xs-4">
                        Requested Time
                    </div>
                    <div class="col-xs-8">
                        @Html.DisplayFor(model => model.RequestInfo.RequestedTime, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                </div>
                <div class="row">
                    <div class="col-xs-4">
                        Assignee
                    </div>
                    @if (Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_PENDING)
                    {
                        <div class="col-xs-8">
                            @Html.DropDownListFor(model => model.RequestInfo.StaffCode, Model.StaffCodeOptions, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                        </div>
                    }
                    else
                    {
                        <div class="col-xs-8">
                            @Html.ActionLink(Model.RequestInfo.StaffName, "ViewProfile", "Account",
                                        new { username = Model.RequestInfo.StaffCode }, null)
                            @Html.HiddenFor(model => model.RequestInfo.StaffCode, new { @class = "form-control" })
                        </div>
                    }
                </div>
            </div>
            <div class="col-xs-6">
                <div class="row">
                    <div class="col-xs-4">
                        Customer
                    </div>
                    <div class="col-xs-8">
                        @Html.ActionLink(Model.CustomerInfo.CustomerName, "ViewProfile", "Account", new { username = Model.CustomerInfo.Customer }, null)
                    </div>
                </div>
                @if (Model.CustomerInfo.Company != null)
                {
                    <div class="row">
                        <div class="col-xs-4">
                            Company Name
                        </div>
                        <div class="col-xs-8">
                            @Html.DisplayFor(model => model.CustomerInfo.Customer, new { @class = "form-control" })
                        </div>
                    </div>
                }
                <div class="row">
                    <div class="col-xs-4">
                        Phone Number
                    </div>
                    <div class="col-xs-8">
                        @Html.DisplayFor(model => model.CustomerInfo.Phone, new { @class = "form-control" })
                    </div>
                </div>
            </div>
        </div>
        <hr />
        <div class="row">
            <div class="col-xs-4">
                Selected Server
            </div>
            <div class="col-xs-8">
                @Html.DisplayFor(model => model.SelectedServer, new { @class = "form-control" })
            </div>
        </div>
        <div class="row">
            <div class="col-xs-4">
                Description
            </div>
            <div class="col-xs-8">
                @Html.DisplayFor(model => model.RequestInfo.Description, new { @class = "form-control" })
            </div>
        </div>
        <div class="row">
            <div class="col-xs-4">
                Returned IPs
            </div>
            <div class="col-xs-8">
                @for (int i = 0; i < Model.ReturningIPs.Count; i++)
                {
                    @Html.DisplayFor(model => Model.ReturningIPs[i], new { @class = "form-control" })
                    @Html.HiddenFor(model => Model.ReturningIPs[i])
                    <br />
                }
            </div>
        </div>
        <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
            <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
            </div>
            <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
                @Html.HiddenFor(model => model.RequestInfo.RequestCode)
                @Html.HiddenFor(model => model.CustomerInfo.Customer)
                @Html.HiddenFor(model => model.RequestInfo.StaffCode)
                @Html.HiddenFor(x => x.RequestInfo.RequestType)
                @Html.HiddenFor(x => x.SelectedServer)
                @if (Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_WAITING || Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_PROCESSING)
                {
                    <button type="submit" id="btnApprove" name="@Constants.FormAction.APPROVE_ACTION" value="@Constants.FormAction.OK_ACTION" class="@Constants.HtmlFormat.PRIMARY_BUTTON_CLASS">
                        @Labels.Approve
                    </button>
                            <button type="submit" id="btnReject" name="@Constants.FormAction.REJECT_ACTION" value="@Constants.FormAction.REJECT_ACTION" class="@Constants.HtmlFormat.DANGER_BUTTON_CLASS">
                                @Labels.Reject
                            </button>
                }
                else if (Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_PENDING)
                {
                    <button type="submit" id="btnAccept" name="@Constants.FormAction.ACCEPT_ACTION" value="@Constants.FormAction.OK_ACTION" class="@Constants.HtmlFormat.PRIMARY_BUTTON_CLASS">
                        @Labels.Accept
                    </button>
                }
            </div>
        </div>
    }
</section>
