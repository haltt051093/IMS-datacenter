@model ProcessRequestAssignIPViewModel
@{
    ViewBag.Title = Pages.ProcessRequestAssignIP;
    ViewBag.PageTitle = Pages.ProcessRequestAssignIP;
    ViewBag.Breadcrumbs = new List<BreadcrumbModel>
    {
        new BreadcrumbModel("Home", "Index", Pages.Home),
        new BreadcrumbModel("ProcessRequest", "Index", Pages.ProcessRequest),
        new BreadcrumbModel("ProcessRequest", "Detail", Pages.ProcessRequestAssignIP)
    };
}
<section class="main-content">
    @using (Html.BeginForm("CancelRequestAssignIp", "Request", FormMethod.Post))
    {
        <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
            @Html.HiddenFor(model => model.SuccessMessage)
            <div class="col-xs-6">
                <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
                    <div class="@Constants.HtmlFormat.FORM_LABEL_X2_CLASS">
                        @Html.LabelFor(model => model.RequestInfo.StatusName)
                    </div>
                    <div class="@Constants.HtmlFormat.FORM_DETAIL_X2_CLASS">
                        @Html.DisplayFor(model => model.RequestInfo.StatusName, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                    </div>
                </div>
                <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
                    <div class="@Constants.HtmlFormat.FORM_LABEL_X2_CLASS">
                        @Html.LabelFor(model => model.RequestInfo.RequestedTime)
                    </div>
                    <div class="@Constants.HtmlFormat.FORM_DETAIL_X2_CLASS">
                        @Html.DisplayFor(model => model.RequestInfo.RequestedTime, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                    </div>
                </div>
                <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
                    <div class="@Constants.HtmlFormat.FORM_LABEL_X2_CLASS">
                        @Html.LabelFor(model => model.RequestInfo.Description)
                    </div>
                    <div class="@Constants.HtmlFormat.FORM_DETAIL_X2_CLASS">
                        @Html.DisplayFor(model => model.RequestInfo.Description, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                    </div>
                </div>
            </div>
            <div class="col-xs-6">
            </div>
        </div>
        <hr />
        <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
            <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
                @Html.LabelFor(model => model.NumberOfIP)
            </div>
            <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
                @Html.DisplayFor(model => model.NumberOfIP, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                @Html.HiddenFor(model => model.NumberOfIP)
            </div>
        </div>
        <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
            <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
                @Html.LabelFor(model => model.SelectedServer)
            </div>
            <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
                @Html.ActionLink(Model.SelectedServer + " - Default IP: " + Model.SelectedDefaultIP, "Detail", "Server",
                    new { code = Model.SelectedServer }, null)
                @Html.HiddenFor(model => model.SelectedServer)
            </div>
        </div>
        if (Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_DONE)
        {
            <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
                <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
                    @*@Html.LabelFor(model => model.IPs)*@
                </div>
                <div class="@Constants.HtmlFormat.FORM_DETAIL_CLASS">
                    <table class="@Constants.HtmlFormat.DATATABLE_CLASS">
                        <thead>
                            <tr class="@Constants.HtmlFormat.DATATABLE_HEADER_CLASS">
                                <th>
                                    New IPs
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.IPs)
                            {
                                <tr>
                                    <td>
                                        @Html.DisplayFor(model => item, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
        if (Model.RequestInfo.Reason != null && Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_REJECTED)
        {
            <hr />
            <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
                <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
                    @Html.LabelFor(model => model.RequestInfo.Reason)
                </div>
                <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
                    @Html.DisplayFor(model => model.RequestInfo.Reason, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                </div>
            </div>
        }
        <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
            <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
            </div>
            <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
                @Html.HiddenFor(model => model.RequestInfo.RequestCode)
                @Html.HiddenFor(model => model.CustomerInfo.Customer)
                @Html.HiddenFor(x => x.RequestInfo.RequestType)
                @Html.HiddenFor(model => model.RequestInfo.TaskCode)
                @if ((Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_PENDING ||
                      Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_PROCESSING) && User.IsInRole("Customer"))
                {
                    <a class="btn btn-danger" data-toggle="modal" data-target="#Cancelrequest">Cancel</a>
                }
            </div>
        </div>
              <!-- Cancel request modal -->
        <div id="Cancelrequest" class="@Constants.HtmlFormat.MODAL_CLASS" tabindex="-1" role="dialog" aria-hidden="true">
            <div class="modal-dialog" style="width: 350px">
                <div class="modal-content">


                    <div class="modal-body">
                        <h4>Are you sure to cancel this request?</h4>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" id="btnCancel" name="@Constants.FormAction.CANCEL_ACTION" value="@Constants.FormAction.CANCEL_ACTION" class="@Constants.HtmlFormat.PRIMARY_BUTTON_CLASS">
                            @Labels.OK
                        </button>
                        <button type="button" name="@Constants.FormAction.ACTION_NAME" value="@Constants.FormAction.CANCEL_ACTION" class="@Constants.HtmlFormat.DEFAULT_BUTTON_CLASS"
                                data-dismiss="modal">
                            @Labels.DialogCancel
                        </button>

                    </div>

                </div><!-- /.modal-content -->
            </div><!-- /.modal-dialog -->
        </div><!-- /.modal -->
    }
</section>
<script type="text/javascript">
    $(function () {
        $('#btnApprove').on('click', function () {
            $('#selectedIps').find('option').attr('selected', true);
        });
        var message = $('#SuccessMessage').val();
        if (message) {
            notif({
                msg: "<b>Success! </b>" + message,
                type: "info",
                position: "center"
            });
            $('#SuccessMessage').val("");
        }
        $('#availableIps').dblclick(function () {
            var pass = $('#availableIps').val();
            $('#selectedIps').append('<option value="' + pass + '">' + pass + '</option>');
            $("[id*=availableIps] option:selected").remove();
            return false;
            //document.getElementById("selectedIps").value = pass;
        });

        $('#selectedIps').dblclick(function () {
            //var count = $('#selectedIps option:selected').length;
            //args.IsValid = count > 0 && count <= 5;
            var pass = $('#selectedIps').val();
            var ipNumber = $('#IpNumber').val();
            $('#availableIps').append('<option value="' + pass + '">' + pass + '</option>');
            $("[id*=selectedIps] option:selected").remove();
            // Check if the parent has reached the limit of selected items.
            if ($(this).parent().val().length >= ipNumber) {
                // Removed the selected attribute from this option.
                $(this).remdaoveAttr("selected");
                //remove gia tri duoc chon khoi list
            }
        });
    });

</script>