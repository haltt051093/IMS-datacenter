@model ProcessRequestBringServerAwayViewModel
@{
    ViewBag.Title = Pages.ProcessRequestBringServerAway;
    ViewBag.PageTitle = Pages.ProcessRequestBringServerAway;
    ViewBag.Breadcrumbs = new List<BreadcrumbModel>
    {
        new BreadcrumbModel("Home", "Index", Pages.Home),
        new BreadcrumbModel("ProcessRequest", "Index", Pages.ProcessRequest),
        new BreadcrumbModel("ProcessRequest", "Detail", Pages.ProcessRequestBringServerAway)
    };
}
<section class="main-content">
    @using (Html.BeginForm("CancelRequestBringServerAway", "Request", FormMethod.Post))
    {
        @Html.HiddenFor(model => model.SuccessMessage)
        @Html.HiddenFor(model => model.ErrorMessage)
        <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
            <div class="col-xs-6">
                <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
                    <div class="@Constants.HtmlFormat.FORM_LABEL_X2_CLASS">
                        @Html.LabelFor(model => model.RequestInfo.StatusName)
                    </div>
                    <div class="@Constants.HtmlFormat.FORM_DETAIL_X2_CLASS">
                        @Html.DisplayFor(model => model.RequestInfo.StatusName, new {@class = Constants.HtmlFormat.FORM_INNER_CLASS})
                    </div>
                </div>
                <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
                    <div class="@Constants.HtmlFormat.FORM_LABEL_X2_CLASS">
                        @Html.LabelFor(model => model.RequestInfo.RequestedTime)
                    </div>
                    <div class="@Constants.HtmlFormat.FORM_DETAIL_X2_CLASS">
                        @Html.DisplayFor(model => model.RequestInfo.RequestedTime, new {@class = Constants.HtmlFormat.FORM_INNER_CLASS})
                    </div>
                </div>
                <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
                    <div class="@Constants.HtmlFormat.FORM_LABEL_X2_CLASS">
                        @Html.LabelFor(model => model.RequestInfo.AppointmentTime)
                    </div>
                    <div class="@Constants.HtmlFormat.FORM_DETAIL_X2_CLASS">
                        @Html.DisplayFor(model => model.RequestInfo.AppointmentTime, new {@class = Constants.HtmlFormat.FORM_INNER_CLASS})
                    </div>
                </div>
                <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
                    <div class="@Constants.HtmlFormat.FORM_LABEL_X2_CLASS">
                        @Html.LabelFor(model => model.RequestInfo.Description)
                    </div>
                    <div class="@Constants.HtmlFormat.FORM_DETAIL_X2_CLASS">
                        @Html.Raw(Model.RequestInfo.Description)
                    </div>
                </div>
            </div>
            <div class="col-xs-6">
            </div>
        </div>
        <hr/>
        <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
            <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
                @Html.LabelFor(model => model.Servers)
            </div>
            <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
                <table id="" class="@Constants.HtmlFormat.DATATABLE_CLASS">
                    <thead>
                        <tr class="@Constants.HtmlFormat.DATATABLE_HEADER_CLASS">
                            <th>Server</th>
                            <th>IP Address</th>
                            <th>Location</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < Model.ServerOfCustomer.Count; i++)
                        {
                            <tr>

                                <td>
                                    @Html.DisplayFor(model => Model.ServerOfCustomer[i].ServerCode, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                                    @Html.HiddenFor(modelItem => modelItem.ServerOfCustomer[i].ServerCode)
                                </td>
                                <td>
                                    <dl>
                                        @for (int j = 0; j < Model.ServerOfCustomer[i].ServerIps.Count; j++)
                                        {
                                            <dt>
                                                @Html.DisplayFor(model => Model.ServerOfCustomer[i].ServerIps[j].CurrentIP, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                                                @Html.HiddenFor(model => Model.ServerOfCustomer[i].ServerIps[j].CurrentIP, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                                            </dt>
                                        }
                                    </dl>
                                </td>
                                <td>
                                    <dl>
                                        @for (int l = 0; l < Model.ServerOfCustomer[i].locations.Count; l++)
                                        {
                                            <dt>
                                                @Html.DisplayFor(model => Model.ServerOfCustomer[i].locations[l], new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                                            </dt>
                                        }
                                    </dl>
                                </td>
                            </tr>
                        }
                        <tr>
                            <td>
                                @Html.DisplayFor(model => model.SelectedServerNumber, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                            </td>
                            <td>
                                @Html.DisplayFor(model => model.ReturnIpNumber, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                            </td>
                            <td>
                                @Html.DisplayFor(model => model.ReturnLocationNumber, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
        if (Model.RequestInfo.Reason != null && Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_REJECTED)
        {
            <hr />
            <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
                <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
                    @Html.LabelFor(model => model.RequestInfo.Reason)
                </div>
                <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
                    @Html.DisplayFor(model => model.RequestInfo.Reason, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                </div>
            </div>
        }
        <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
            <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
            </div>
            <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
                @Html.HiddenFor(model => model.RequestInfo.RequestCode)
                @Html.HiddenFor(model => model.CustomerInfo.Customer)
                @Html.HiddenFor(x => x.RequestInfo.RequestType)
                @Html.HiddenFor(model => model.RequestInfo.TaskCode)
                @if ((Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_PENDING ||
                      Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_WAITING ||
                      Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_PROCESSING) && User.IsInRole("Customer"))
                {
                    <a class="btn btn-danger" data-toggle="modal" data-target="#Cancelrequest">Cancel</a>
                }
            </div>
        </div>
                      <!-- Cancel request modal -->
        <div id="Cancelrequest" class="@Constants.HtmlFormat.MODAL_CLASS" tabindex="-1" role="dialog" aria-hidden="true">
            <div class="modal-dialog" style="width: 350px">
                <div class="modal-content">


                    <div class="modal-body">
                        <h4>Are you sure to cancel this request?</h4>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" id="btnCancel" name="@Constants.FormAction.CANCEL_ACTION" value="@Constants.FormAction.CANCEL_ACTION" class="@Constants.HtmlFormat.PRIMARY_BUTTON_CLASS">
                            @Labels.OK
                        </button>
                        <button type="button" name="@Constants.FormAction.ACTION_NAME" value="@Constants.FormAction.CANCEL_ACTION" class="@Constants.HtmlFormat.DEFAULT_BUTTON_CLASS"
                                data-dismiss="modal">
                            @Labels.DialogCancel
                        </button>

                    </div>

                </div><!-- /.modal-content -->
            </div><!-- /.modal-dialog -->
        </div><!-- /.modal -->
    }
</section>
<script type="text/javascript">
    $(function () {
        var message = $('#SuccessMessage').val();
        var err = $('#ErrorMessage').val();
        if (message) {
            notif({
                msg: "<b>Success! </b>" + message,
                type: "info",
                position: "center"
            });
            $('#SuccessMessage').val("");
        }
        if (err) {
            notif({
                msg: err,
                type: "error",
                position: "center"
            });
            $('#ErrorMessage').val("");
        }
    });
</script>