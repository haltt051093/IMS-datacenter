@model RequestAddServerViewModel

@{
    ViewBag.Title = Pages.RequestAddServer;
    ViewBag.PageTitle = Pages.RequestAddServer;
    ViewBag.Breadcrumbs = new List<BreadcrumbModel>
    {
        new BreadcrumbModel("Home", "Index", Pages.Home),
        new BreadcrumbModel("Request", "Index", Pages.Request),
        new BreadcrumbModel("Request", "Create", Pages.RequestCreate),
        new BreadcrumbModel("Request", "Create", Pages.RequestAddServer, new { Type = Constants.RequestTypeCode.ADD_SERVER })
    };
}
<div class="main-content">
    @using (Html.BeginForm("AddServer", "Request", FormMethod.Post, new { @id = "addserverform" }))
    {
        <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
            <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
                @Html.LabelFor(model => model.RequestInfo.AppointmentTime)
            </div>
            <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
                <div class='input-group date' id='datetimepicker1'>
                    @Html.TextBoxFor(model => model.RequestInfo.AppointmentTime, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                    @Html.ValidationMessageFor(model => model.RequestInfo.AppointmentTime)
                    <span class="input-group-addon">
                        <span class="glyphicon glyphicon-calendar"></span>
                    </span>
                </div>
            </div>
        </div>
        <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
            <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
                @Html.LabelFor(model => model.Servers)
            </div>
            <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
                <table id="MyList" class="@Constants.HtmlFormat.DATATABLE_CLASS">
                    <thead>
                        <tr class="@Constants.HtmlFormat.DATATABLE_HEADER_CLASS">
                            <th>No</th>
                            <th>Power</th>
                            <th>Size</th>
                            <th>Bandwidth</th>
                            <th>Serial Number</th>
                            <th>Part Number</th>
                            <th></th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < Model.Servers.Count; i++)
                        {
                            <tr id="@Model.Servers[i].TempCode">
                                <td>
                                    @Html.Raw(i + 1)
                                </td>
                                <td>
                                    @Html.DisplayFor(model => Model.Servers[i].Power, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })W
                                </td>
                                <td>
                                    @Html.DisplayFor(model => Model.Servers[i].Size, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })U
                                </td>
                                <td>
                                    @Html.DisplayFor(model => Model.Servers[i].Bandwidth, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                                </td>
                                <td>
                                    @Html.DisplayFor(model => Model.Servers[i].SerialNumber, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                                </td>
                                <td>
                                    @Html.DisplayFor(model => Model.Servers[i].PartNumber, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                                </td>
                                <td>
                                    <a href="#" x-code="@Model.Servers[i].TempCode" action="edit">Edit</a>
                                </td>
                                <td>
                                    <a href="#" x-code="@Model.Servers[i].TempCode" action="delete">Delete</a>
                                </td>
                            </tr>
                        }
                    </tbody>
                    <tfoot>
                        <tr>
                            <td colspan="11">
                                <button type="button" id="addserver" name="@Constants.FormAction.ACTION_NAME" value="" class="@Constants.HtmlFormat.SECONDARY_BUTTON_CLASS">
                                    @Labels.AddServerInfo
                                </button>
                            </td>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>
        <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
            <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
                @Html.LabelFor(model => model.RequestInfo.Description)
            </div>
            <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
                @Html.TextAreaFor(model => model.RequestInfo.Description, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                @Html.ValidationMessageFor(model => model.RequestInfo.Description)
            </div>
        </div>
        <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
            <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
            </div>
            @Html.HiddenFor(x => x.RequestInfo.RequestCode)
            <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
                <button type="submit" id="btnAccept" name="@Constants.FormAction.ACTION_NAME" value="@Constants.FormAction.OK_ACTION" class="@Constants.HtmlFormat.PRIMARY_BUTTON_CLASS">
                    Send Request
                </button>
            </div>
        </div>
    }
</div>

<!-- ADD SERVER MODAL -->
<div id="serverinfo-modal" class="@Constants.HtmlFormat.MODAL_CLASS" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog">
        @using (Ajax.BeginForm(new AjaxOptions { HttpMethod = "Post", Url = Url.Action("AddServerTemp", "Request"), OnComplete = "addServerComplete" }))
        {
            <div class="modal-content">
                <div class="modal-header">
                    <div class="@Constants.HtmlFormat.MODAL_HEADER_CLASS"><i class="fa fa-plus"></i> @Labels.AddServer</div>
                </div>
                <div class="modal-body form-horizontal">
                    <div class="@Constants.HtmlFormat.MODAL_ROW_CLASS">
                        <div class="@Constants.HtmlFormat.MODAL_LABEL_CLASS">
                            @Html.LabelFor(model => model.Server.Power)
                        </div>
                        <div class="@Constants.HtmlFormat.MODAL_CONTROL_CLASS">
                            @Html.TextBoxFor(model => model.Server.Power, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                            @Html.ValidationMessageFor(model => model.Server.Power)
                        </div>
                    </div>
                    <div class="@Constants.HtmlFormat.MODAL_ROW_CLASS">
                        <div class="@Constants.HtmlFormat.MODAL_LABEL_CLASS">
                            <label>Size</label>
                        </div>
                        <div class="@Constants.HtmlFormat.MODAL_CONTROL_CLASS">
                            @Html.DropDownListFor(model => model.Server.Size, Model.ServerSizes, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                        </div>
                    </div>
                    <div class="@Constants.HtmlFormat.MODAL_ROW_CLASS">
                        <div class="@Constants.HtmlFormat.MODAL_LABEL_CLASS">
                            @Html.LabelFor(model => model.Server.SerialNumber)
                        </div>
                        <div class="@Constants.HtmlFormat.MODAL_CONTROL_CLASS">
                            @Html.TextBoxFor(model => model.Server.SerialNumber, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                            @Html.ValidationMessageFor(model => model.Server.SerialNumber)
                        </div>
                    </div>
                    <div class="@Constants.HtmlFormat.MODAL_ROW_CLASS">
                        <div class="@Constants.HtmlFormat.MODAL_LABEL_CLASS">
                            @Html.LabelFor(model => model.Server.PartNumber)
                        </div>
                        <div class="@Constants.HtmlFormat.MODAL_CONTROL_CLASS">
                            @Html.TextBoxFor(model => model.Server.PartNumber, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                            @Html.ValidationMessageFor(model => model.Server.PartNumber)
                        </div>
                    </div>
                    <div class="@Constants.HtmlFormat.MODAL_ROW_CLASS">
                        <div class="@Constants.HtmlFormat.MODAL_LABEL_CLASS">
                            <label>Bandwidth</label>
                        </div>
                        <div class="@Constants.HtmlFormat.MODAL_CONTROL_CLASS">
                            @Html.RadioButtonFor(model => model.Server.Bandwidth, "100Mbps", new { @checked = "checked" }) 100Mbps
                            @Html.RadioButtonFor(model => model.Server.Bandwidth, "1Gbps", new { }) 1Gbps
                        </div>
                    </div>
                    @Html.HiddenFor(model => model.Server.TempCode)
                    @Html.HiddenFor(model => model.Server.btnAction)
                    <div class="modal-footer">
                        <button type="button" name="@Constants.FormAction.ACTION_NAME" value="@Constants.FormAction.CANCEL_ACTION"
                                class="@Constants.HtmlFormat.DEFAULT_BUTTON_CLASS" data-dismiss="modal">
                            @Labels.DialogCancel
                        </button>
                        <button type="submit" id="submitserver" name="@Constants.FormAction.ACTION_NAME"
                                value="@Constants.FormAction.OK_ACTION" class="@Constants.HtmlFormat.PRIMARY_BUTTON_CLASS">
                            @Labels.DialogOK
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
<script type="text/javascript">
    function clearModal() {
        $('#Server_Power').val('');
        $('#Server_Size').val('1');
        $('#Server_SerialNumber').val('');
        $('#Server_PartNumber').val('');
    }

    function setModal(server) {
        $('#Server_Power').val(server.Power);
        $('#Server_Size').val(server.Size);
        $('#Server_SerialNumber').val(server.SerialNumber);
        $('#Server_PartNumber').val(server.PartNumber);
        $('#Server_TempCode').val(server.TempCode);
        $('#Server_btnAction').val("Edit");
        $('#Server_Bandwidth').val();
    }

    function addModal(server) {
        $('#item_Power').val(server.Power);
        $('#item_Size').val(server.Size);
        $('#item_Bandwidth').val(server.item_Bandwidth);
        $('#item_SerialNumber').val(server.SerialNumber);
        $('#item_PartNumber').val(server.PartNumber);
        $('#item_TempCode').val(server.TempCode);
    }

        var power = $('<td></td>').html(server.Power + 'W');
        var size = $('<td></td>').html(server.Size + 'U');
        var bandwidth = $('<td></td>').html(server.Bandwidth);
        var serialNumber = $('<td></td>').html(server.SerialNumber);
        var partNumber = $('<td></td>').html(server.PartNumber);
        var edit = $('<td></td>').html($('<a></a>').attr('href', '#').attr('x-code', server.TempCode).attr('action', 'edit').html('Edit'));
        var remove = $('<td></td>').html($('<a></a>').attr('href', '#').attr('x-code', server.TempCode).attr('action', 'delete').html('Delete'));
        row.append(id).append(power).append(size).append(bandwidth).append(serialNumber).append(partNumber).append(edit).append(remove);
        row.find('a[x-code][action="edit"]').click(function () {
            clearModal();
            $('#submitserver').val('@Constants.FormAction.EDIT_ACTION');
            $('#serverinfo-modal').modal('show');
            var tempCode = $(this).attr('x-code');
            get('@Url.Action("GetTempServer", "Temp", new {httproute = ""})' + '/' + tempCode, function (data) {
                setModal(data.Server);
            });
            return false;
        });
        row.find('a[x-code][action="delete"]').click(function () {
            var tempCode = $(this).attr('x-code');
            alertify.confirm('Are you sure to delete this server?', function () {
                get('@Url.Action("DeleteTempServer", "Temp", new {httproute = ""})' + '/' + tempCode, function (data) {
                    $('#' + tempCode).remove();
                });
            }, function () {

            });
            return false;
        });
    }

    function addServer(server) {
        var tbody = $('#MyList tbody');
        var rowId = tbody.find('tr').length + 1;
        server.RowId = rowId;
        var row = $('<tr></tr>').attr('id', server.TempCode);
        tbody.append(row);
        var lastRow = tbody.find('tr').last();
        setRow(lastRow, server);
    }

    function editServer(server) {
        var lastRow = $('#' + server.TempCode);
        var rowId = lastRow.find('td').first().text();
        server.RowId = rowId;
        setRow(lastRow, server);
    }

    function addServerComplete(data) {
        var response = data.responseJSON;
        if (response.Success) {
            $('#serverinfo-modal').modal('hide');
            for (var i = 0; i < response.Codes.length; i++) {
                var tempCode = response.Codes[i];
                get('@Url.Action("GetTempServer", "Temp", new {httproute = ""})' + '/' + tempCode, function(server) {
                    if (response.Action == '@Constants.FormAction.EDIT_ACTION') {
                        editServer(server.Server);
                    } else {
                        addServer(server.Server);
                    }
                });
            }
        }
    }
</script>

<script type="text/javascript">
    //$('#datetimepicker1').datetimepicker({
    //    "disabledHours": [0, 1, 2, 3, 4, 5, 6, 7, 21, 22, 23, 24],
    //    "enabledHours": [8, 9, 10, 12, 12, 14, 15, 16, 17, 18, 19, 20],
    //    "stepping": '30',
    //    "minDate": 'moment',
    //    "locale": 'vi'
    //});

    $('#addserver').click(function () {
        clearModal();
        $('#submitserver').val('@Constants.FormAction.OK_ACTION');
        $('#serverinfo-modal').modal('show');
        return false;
    });

    $('a[x-code][action="edit"]').click(function () {
        clearModal();
        $('#submitserver').val('@Constants.FormAction.EDIT_ACTION');
        $('#serverinfo-modal').modal('show');
        var tempCode = $(this).attr('x-code');
        get('@Url.Action("GetTempServer", "Temp", new {httproute = ""})' + '/' + tempCode, function (data) {
            setModal(data.Server);
        });
        return false;
    });

    $('a[x-code][action="delete"]').click(function () {
        var tempCode = $(this).attr('x-code');
        alertify.confirm('Are you sure to delete this server?', function () {
            get('@Url.Action("DeleteTempServer", "Temp", new {httproute = ""})' + '/' + tempCode, function (data) {
                $('#' + tempCode).remove();
            });
        }, function () {

        });
        return false;
    });
</script>
