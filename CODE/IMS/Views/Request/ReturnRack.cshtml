@model RequestReturnRackViewModel
@{
    ViewBag.Title = Pages.RequestReturnRack;
    ViewBag.PageTitle = Pages.RequestReturnRack;
    ViewBag.Breadcrumbs = new List<BreadcrumbModel>
    {
        new BreadcrumbModel("Home", "Index", Pages.Home),
        new BreadcrumbModel("Request", "Index", Pages.Request),
        new BreadcrumbModel("Request", "Create", Pages.RequestCreate),
        new BreadcrumbModel("Request", "Create", Pages.RequestReturnRack, new { Type = Constants.RequestTypeCode.RENT_RACK })
    };
}

<section class="main-content">
    @using (Html.BeginForm("ReturnRack", "Request", FormMethod.Post))
    {
        <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
            <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
                @Html.Label("Rack")
            </div>
            <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
                <table id="MyTable" class="@Constants.HtmlFormat.DATATABLE_CLASS">
                    <thead>
                        <tr class="@Constants.HtmlFormat.DATATABLE_HEADER_CLASS">
                            <th>
                                <input type="checkbox" id="checkAll" />
                            </th>
                            <th>
                                Rack
                            </th>
                            <th>
                                Number of servers
                            </th>
                        </tr>
                    </thead>
                    <tbody id="tbodyid">
                        
                        @if (Model.AllRacks == null)
                        {
                            <tr>
                                <td colspan="11">
                                    @Html.Raw("You have no rack.")
                                </td>
                            </tr>
                        }
                        else
                        {
                            for (int i = 0; i < Model.AllRacks.Count; i++)
                            {
                                <tr class="check" rack-code="@Model.AllRacks[i].RackCode">
                                    <td>
                                        @if (Model.AllRacks[i].ServerNum != 0)
                                        {
                                            @Html.CheckBoxFor(modelItem => Model.AllRacks[i].Checked, new { disabled = "disabled", data_check = "chknull" })
                                        }
                                        else
                                        {
                                            @Html.CheckBoxFor(modelItem => Model.AllRacks[i].Checked, new { data_check = "chknull" })
                                        }
                                    </td>
                                    <td>
                                        @Html.DisplayFor(model => Model.AllRacks[i].RackName)
                                        @Html.HiddenFor(model => Model.AllRacks[i].RackName)
                                        @Html.HiddenFor(model => Model.AllRacks[i].RackCode, new { @class = "rackCode" })
                                    </td>
                                    <td class="cannotclick">
                                        @Html.DisplayFor(model => Model.AllRacks[i].ServerNum)
                                        @if (Model.AllRacks[i].ServerNum != 0)
                                        {
                                            @*@Html.ActionLink("Return all servers", "ReturnRackByBringServerAway", "Request",
                                                new { RackCode = Model.AllRacks[i].RackCode }, new { @class = "returnallservers" })*@
                                            @*<a href="@Url.Action("Create", "Request", new { Type = Constants.RequestTypeCode.BRING_SERVER_AWAY})" class="returnall" rack-code="@Model.AllRacks[i].RackCode">Return all servers</a>*@
                                            <a href="@Url.Action("Create", "Request", new { Type = Constants.RequestTypeCode.BRING_SERVER_AWAY})">  [Move all servers out]</a>
                                        }
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
            <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
                @Html.LabelFor(model => model.RequestInfo.Description)
            </div>
            <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
                @Html.TextAreaFor(model => model.RequestInfo.Description, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                @Html.ValidationMessageFor(model => model.RequestInfo.Description)
            </div>
        </div>
        <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
            <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
            </div>
            <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
                @Html.HiddenFor(model => model.SelectedRacks, new { id = "selectedRacks" })
                <button type="submit" id="btnAccept" name="@Constants.FormAction.ACTION_NAME" value="@Constants.FormAction.OK_ACTION" class="@Constants.HtmlFormat.PRIMARY_BUTTON_CLASS">
                    Send Request
                </button>
            </div>
        </div>
    }
</section>

<script>
    $(function() {

        $("#checkAll").change(function() {
            var state = $('#checkAll').is(':checked');
            $('tr.check input[type="checkbox"]:not(:disabled)').prop('checked', state);
        });

        var selectedChkCount = 0;
        $('#tbodyid').on('click', function () {
            var selectedChk = $('[data-check="chknull"]:checked');
            selectedChkCount = selectedChk.length;
        });
        $("#btnAccept").click(function () {
            if (selectedChkCount <= 0) {
                notif({
                    msg: "<b>Error!</b> You should choose at least one rack!",
                    type: "error",
                    position: "center"
                });
                return false;
            } 
        });

        $('.returnall').on('click', function () {
            var rackCode = $(this).attr('rack-code');
            window.location.assign('@Url.Action("ReturnRackByBringServerAway", "Request")' + '/' + rackCode);
        });
            @*$.ajax({
                cache: false,
                url: '@(Url.Action("Create", "Request"))',
                type: 'post',
                data: {
                    "Type": "RT007",
                    "RackCode": rackCode
                },
                dataType: "json",
                success: function(result) {
                    alert('Save Successful');
                }
            });*@
       // });
    });
</script>
