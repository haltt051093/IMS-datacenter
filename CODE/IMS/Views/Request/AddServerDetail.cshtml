@model ProcessRequestAddServerViewModel
@{
    ViewBag.Title = Pages.ProcessRequestAddServer;
    ViewBag.PageTitle = Pages.ProcessRequestAddServer;
    ViewBag.Breadcrumbs = new List<BreadcrumbModel>
    {
        new BreadcrumbModel("Home", "Index", Pages.Home),
        new BreadcrumbModel("ProcessRequest", "Index", Pages.ProcessRequest),
        new BreadcrumbModel("ProcessRequest", "Detail", Pages.ProcessRequestAddServer)
    };
}
<section class="main-content">
    @using (Html.BeginForm("CancelRequestAddServer", "Request", FormMethod.Post))
    {
        <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
            <div class="col-xs-6">
                <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
                    <div class="@Constants.HtmlFormat.FORM_LABEL_X2_CLASS">
                        @Html.LabelFor(model => model.RequestInfo.RequestCode)
                        @Html.HiddenFor(model => model.SuccessMessage)
                    </div>
                    <div class="@Constants.HtmlFormat.FORM_DETAIL_X2_CLASS">
                        @Html.DisplayFor(model => model.RequestInfo.RequestCode, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                    </div>
                </div>
                <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
                    <div class="@Constants.HtmlFormat.FORM_LABEL_X2_CLASS">
                        @Html.LabelFor(model => model.RequestInfo.StatusName)
                    </div>
                    <div class="@Constants.HtmlFormat.FORM_DETAIL_X2_CLASS">
                        @Html.DisplayFor(model => model.RequestInfo.StatusName, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                    </div>
                </div>
                <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
                    <div class="@Constants.HtmlFormat.FORM_LABEL_X2_CLASS">
                        @Html.LabelFor(model => model.RequestInfo.RequestedTime)
                    </div>
                    <div class="@Constants.HtmlFormat.FORM_DETAIL_X2_CLASS">
                        @Html.DisplayFor(model => model.RequestInfo.RequestedTime, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                    </div>
                </div>
                <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
                    <div class="@Constants.HtmlFormat.FORM_LABEL_X2_CLASS">
                        @Html.LabelFor(model => model.RequestInfo.AppointmentTime)
                    </div>
                    <div class="@Constants.HtmlFormat.FORM_DETAIL_X2_CLASS">
                        @Html.DisplayFor(model => model.RequestInfo.AppointmentTime, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                    </div>
                </div>
                <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
                    <div class="@Constants.HtmlFormat.FORM_LABEL_X2_CLASS">
                        @Html.LabelFor(model => model.RequestInfo.Description)
                    </div>
                    <div class="@Constants.HtmlFormat.FORM_DETAIL_X2_CLASS">
                        @Html.DisplayFor(model => model.RequestInfo.Description, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
                    </div>
                </div>
            </div>
            <div class="col-xs-6">
            </div>
        </div>
        <hr />
        <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
            <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
                @Html.LabelFor(model => model.Servers)
            </div>
            <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
                <table id="" class="@Constants.HtmlFormat.DATATABLE_CLASS">
                    <thead>
                    <tr class="@Constants.HtmlFormat.DATATABLE_HEADER_CLASS">
                        <th>No</th>
                        <th>Power</th>
                        <th>Size</th>
                        <th>Bandwidth</th>
                        <th>Serial Number</th>
                        <th>Part Number</th>
                        @if (Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_DONE)
                        {
                            <th>Default IP</th>
                            <th>Location</th>
                        }
                    </tr>
                    </thead>
                    <tbody>
                    @for (int i = 0; i < Model.Servers.Count; i++)
                    {
                        <tr>
                            <td>
                                @Html.Raw(i + 1)
                            </td>
                            <td>
                                @Html.DisplayFor(model => Model.Servers[i].Power, new {@class = Constants.HtmlFormat.FORM_INNER_CLASS})W
                                @Html.HiddenFor(modelItem => modelItem.Servers[i].Power)
                            </td>
                            <td>
                                @Html.DisplayFor(model => Model.Servers[i].Size, new {@class = Constants.HtmlFormat.FORM_INNER_CLASS})U
                                @Html.HiddenFor(modelItem => modelItem.Servers[i].Size)
                            </td>
                            <td>
                                @Html.DisplayFor(model => Model.Servers[i].Bandwidth, new {@class = Constants.HtmlFormat.FORM_INNER_CLASS})
                                @Html.HiddenFor(modelItem => modelItem.Servers[i].Bandwidth)
                            </td>
                            <td>
                                @Html.DisplayFor(model => Model.Servers[i].SerialNumber, new {@class = Constants.HtmlFormat.FORM_INNER_CLASS})
                                @Html.HiddenFor(modelItem => modelItem.Servers[i].SerialNumber)
                            </td>
                            <td>
                                @Html.DisplayFor(model => Model.Servers[i].PartNumber, new {@class = Constants.HtmlFormat.FORM_INNER_CLASS})
                                @Html.HiddenFor(modelItem => modelItem.Servers[i].PartNumber)
                            </td>
                            @if (Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_DONE)
                            {
                                <td>
                                    @Html.DisplayFor(model => Model.Servers[i].DefaultIP, new {@class = Constants.HtmlFormat.FORM_INNER_CLASS})
                                    @Html.HiddenFor(modelItem => modelItem.Servers[i].DefaultIP)
                                </td>
                                <td>
                                    <input type="hidden" value="true" name="location"/>
                                </td>
                            }
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
            <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
            </div>
            <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
                @Html.HiddenFor(model => model.RequestInfo.RequestCode)
                @Html.HiddenFor(model => model.CustomerInfo.Customer)
                @Html.HiddenFor(x => x.RequestInfo.RequestType)
                @Html.HiddenFor(model => model.RequestInfo.TaskCode)
                @if ((Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_PENDING ||
                      Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_WAITING ||
                      Model.RequestInfo.StatusCode == Constants.StatusCode.REQUEST_PROCESSING) && User.IsInRole("Customer"))
                {
                    <button type="submit" id="btnCancel" name="@Constants.FormAction.CANCEL_ACTION" value="@Constants.FormAction.CANCEL_ACTION" class="@Constants.HtmlFormat.DANGER_BUTTON_CLASS">
                        @Labels.Cancel
                    </button>
                }
            </div>
        </div>
    }
</section>
<script type="text/javascript">
    $(function () {
        var message = $('#SuccessMessage').val();
        if (message) {
            notif({
                msg: "<b>Success! </b>" + message,
                type: "info",
                position: "center"
            });
            $('#SuccessMessage').val("");
        }
    });
</script>
