@model RequestIndexViewModel
@{
    ViewBag.Title = Pages.RequestIndex;
    ViewBag.PageTitle = Pages.RequestIndex;
    ViewBag.Breadcrumbs = new List<BreadcrumbModel>
    {
        new BreadcrumbModel("Home", "Index", Pages.Home),
        new BreadcrumbModel("Request", "Index", Pages.Request)
    };
}
<!-- Main content -->
<section class="main-content">
    <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
        <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
            @Html.LabelFor(model => model.FilterByRequestType, "Request Type")
        </div>
        <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
            @Html.DropDownListFor(m => m.FilterByRequestType, Model.FilterByRequestType, "Select All", new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
            @Html.ValidationMessageFor(model => model.FilterByRequestType)
        </div>
    </div>
    <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
        <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
            @Html.LabelFor(model => model.SelectedStatus, "Status")
        </div>
        <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
            @Html.DropDownListFor(m => m.SelectedStatus, Model.FilterByStatus, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
            @Html.ValidationMessageFor(model => model.SelectedStatus)
        </div>
    </div>
    <div class="@Constants.HtmlFormat.FORM_ROW_CLASS">
        <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS">
            @Html.LabelFor(model => model.FilterByPeriodOfTime, "Period of Time")
        </div>
        <div class="@Constants.HtmlFormat.FORM_CONTROL_CLASS">
            @Html.DropDownListFor(m => m.FilterByPeriodOfTime, Model.FilterByPeriodOfTime, new { @class = Constants.HtmlFormat.FORM_INNER_CLASS })
            @Html.ValidationMessageFor(model => model.FilterByPeriodOfTime)
        </div>
    </div>
    <table id="example1" class="@Constants.HtmlFormat.DATATABLE_CLASS_HOVER">
        <thead>
            <tr class="@Constants.HtmlFormat.DATATABLE_HEADER_CLASS">
                <th>
                    Request Type
                </th>
                <th>
                    Status
                </th>
                <th>
                    Requested Time
                </th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < Model.Requests.Count; i++)
            {
                <tr class="clickable clickmee check" request-code="@Model.Requests[i].LastestStatusRequest.RequestCode" status-code="@Model.Requests[i].LastestStatusRequest.StatusCode" type-code="@Model.Requests[i].LastestStatusRequest.RequestTypeCode" duration="@Model.Requests[i].LastestStatusRequest.DaysFromNow">
                    <td>
                        @Html.DisplayFor(modelItem => Model.Requests[i].LastestStatusRequest.RequestTypeName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => Model.Requests[i].LastestStatusRequest.StatusName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => Model.Requests[i].LastestStatusRequest.LogTime)
                    </td>
                </tr>
            }
        </tbody>
        @*<tbody class="showhide" style="display: none; background-color: lightgrey;">
                @if (Model.Requests[i].OldStatusRequests != null)
                {
                    foreach (var old in Model.Requests[i].OldStatusRequests)
                    {
                        <tr style="background-color: lightgrey;">
                            <td>
                                @Html.DisplayFor(modelItem => old.RequestTypeName)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => old.StatusName)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => old.LogTime)
                            </td>
                        </tr>
                    }
                }
            </tbody>*@
        <tfoot>
            <tr style="background-color: #404040">
                <th>
                    <span style="color: ghostwhite">
                        RequestType
                    </span>
                </th>
                <th>
                    <span style="color: ghostwhite">
                        Status
                    </span>
                </th>
                <th>
                    <span style="color: ghostwhite">
                        RequestedTime
                    </span>
                </th>
            </tr>
        </tfoot>
    </table>
</section><!-- /.content -->

<script>
    function checkStatus(rowStatusCode, statusCode) {
        if (statusCode == '@Constants.StatusCode.REQUEST_PENDINGPROCESSING') {
            if (rowStatusCode == '@Constants.StatusCode.REQUEST_PENDING' || rowStatusCode == '@Constants.StatusCode.REQUEST_PROCESSING') {
                return true;
            } else {
                return false;
            }
        } else {
            return rowStatusCode == statusCode;
        }
    }

    function filterRequest() {
        var typeCode = $("#FilterByRequestType").val();
        var statusCode = $("#SelectedStatus").val();
        var duration = $('#FilterByPeriodOfTime').val();
        if (typeCode == null) {
            typeCode = '';
        }
        if (statusCode == null) {
            statusCode = '';
        }
        if (duration == null || isNaN(duration)) {
            duration = 99999;
        }
        duration = duration - 0;

        $('#example1 tr[type-code][status-code]').each(function (i, e) {
            var row = $(e);
            var rowTypeCode = row.attr('type-code');
            var rowStatusCode = row.attr('status-code');
            var rowDuration = row.attr('duration');
            var isShow = false;
            if (typeCode == '' && statusCode == '' && duration >= rowDuration) {
                isShow = true;
            } else if (typeCode != '' && statusCode == '') {
                if (rowTypeCode == typeCode && duration >= rowDuration) {
                    isShow = true;
                }
            } else if (typeCode == '' && statusCode != '') {
                if (checkStatus(rowStatusCode, statusCode) && duration >= rowDuration) {
                    isShow = true;
                }
            } else {
                if (rowTypeCode == typeCode && checkStatus(rowStatusCode, statusCode) && duration >= rowDuration) {
                    isShow = true;
                }
            }
            if (isShow) {
                row.show();
            } else {
                row.hide();
            }
        });
    }
</script>

<script type="text/javascript">
    $(".clickmee").dblclick(function () {
        $(this).closest('tbody')
            .next('.showhide')
            .toggle('fast');
    });

    $('#example1').on('click', '.clickmee', function () {
        var requestcode = $(this).attr('request-code');
        window.location.assign('@Url.Action("Detail", "Request")' + '/' + requestcode);
    });

    $("#example1").dataTable({
        "aaSorting": [[2, "desc"]], // Sort by first column descending
        "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
            if (aData[1] == "Pending") {
                $(nRow).addClass('background-warning');
            };
            if (aData[1] == "Processing") {
                $(nRow).addClass('background-info');
            };
        }
    });

    $("#FilterByRequestType").change(function () {
        filterRequest();

    });

    $("#SelectedStatus").change(function () {
        filterRequest();
    });

    $("#FilterByPeriodOfTime").change(function () {
        filterRequest();
    });

    filterRequest();
</script>