@model HomeSidebarViewModel

@{
    var data = new List<SidebarItemModel>();
    data.Add(new SidebarItemModel("fa fa-calendar", "Schedule", "Index", "Schedule") {Roles = new List<string>() { "Shift Head", "Manager", "Staff" } });
    data.Add(new SidebarItemModel("fa fa-share", "Request", "Index", "ProcessRequest") { Roles = new List<string>() { "Shift Head", "Manager", "Staff" } });
    data.Add(new SidebarItemModel("fa  fa-tasks", "Task", "Index", "Task") { Roles = new List<string>() { "Staff" } });
    data.Add(new SidebarItemModel("fa fa-reply-all", "Request History", "Index", "Request") { Roles = new List<string>() { "Customer" } });
    data.Add(new SidebarItemModel("fa fa-hdd-o", "Server", "Index", "Server") {Roles = new List<string>() {"Shift Head", "Customer", "Manager", "Staff"}});
    data.Add(new SidebarItemModel("fa fa-th-list", "Location", "Index", "Location") { Roles = new List<string>() { "Shift Head", "Manager", "Staff" } });
    data.Add(new SidebarItemModel("fa fa-info-circle", "IP Address", "Index", "IP") { Roles = new List<string>() { "Shift Head", "Manager", "Staff" } });
    data.Add(new SidebarItemModel("fa fa-users", "Account", "Index", "Account") { Roles = new List<string>() { "Shift Head", "Manager", "Staff" } });
    data.Add(new SidebarItemModel("fa fa-th-list", "Rack", "Index", "Rack") { Roles = new List<string>() { "Customer" } });
    data.Add(new SidebarItemModel("fa fa-pencil-square-o", "Create request", "", "")
    {
        Roles = new List<string>() { "Customer" },
        SubMenu = new List<SidebarItemModel>()
        {
            new SidebarItemModel("fa fa-angle-double-right", "Add New Server", "Create", "Request", new { Type = Constants.RequestTypeCode.ADD_SERVER})
            {
                Roles = new List<string>() { "Customer" }
            },
            new SidebarItemModel("fa fa-angle-double-right", "Bring Server Away", "Create", "Request", new { Type = Constants.RequestTypeCode.BRING_SERVER_AWAY})
            {
                Roles = new List<string>() { "Customer" }
            },
            new SidebarItemModel("fa fa-angle-double-right", "Assign IP Address", "Create", "Request", new { Type = Constants.RequestTypeCode.ASSIGN_IP})
            {
                Roles = new List<string>() { "Customer" }
            },
            new SidebarItemModel("fa fa-angle-double-right", "Change IP Address", "Create", "Request", new { Type = Constants.RequestTypeCode.CHANGE_IP})
            {
                Roles = new List<string>() { "Customer" }
            },
            new SidebarItemModel("fa fa-angle-double-right", "Return IP Address", "Create", "Request", new { Type = Constants.RequestTypeCode.RETURN_IP})
            {
                Roles = new List<string>() { "Customer" }
            },
            new SidebarItemModel("fa fa-angle-double-right", "Rent Rack", "Create", "Request", new { Type = Constants.RequestTypeCode.RENT_RACK})
            {
                Roles = new List<string>() { "Customer" }
            },
            new SidebarItemModel("fa fa-angle-double-right", "Return Rack", "Create", "Request", new { Type = Constants.RequestTypeCode.RETURN_RACK})
            {
                Roles = new List<string>() { "Customer" }
            }
        }
    });
    data.Add(new SidebarItemModel("fa fa-bar-chart-o", "Report", "", "")
    {
        Roles = new List<string>() { "Shift Head", "Staff", "Manager" },
        SubMenu = new List<SidebarItemModel>()
        {
            new SidebarItemModel("fa fa-angle-double-right", "Blocked IP Address", "ReportBlockIP", "Report") { Roles = new List<string>() { "Shift Head", "Staff", "Manager" } },
        }
    });

    var role = Model.Role;
}

<!-- Sidebar user panel -->
@if (Model.Account != null)
{
    var account = Model.Account;
    <div class="user-panel">
        <div class="pull-left image">
            <img src="@Url.Content("~/img/user.png")" class="img-circle" alt="User Image"/>
        </div>
        <div class="pull-left info" style="background-color: #f4f4f4">
            <p>Hello, @account.LastName</p>
            <a><i class="fa fa-circle text-success"></i> Online</a>
        </div>
    </div>
}

<!-- Sidebar navigation panel -->
<ul class="sidebar-menu">
    @foreach (var menu in data)
    {
        if (!menu.Roles.Contains(role))
        {
            continue;
        }
        if (menu.SubMenu.Count == 0)
        {
            <li>
                <a href="@Url.Action(menu.Action, menu.Controller, menu.RouteValue)">
                    @if (!string.IsNullOrEmpty(menu.Icon)) { <text><i class="@menu.Icon"></i></text> } <span>@menu.Title</span>
                </a>
            </li>
        }
        else
        {
            <li class="treeview ">
                @{
                    <a href="@Url.Action(menu.Action, menu.Controller, menu.RouteValue)">
                        @if (!string.IsNullOrEmpty(menu.Icon)) { <text><i class="@menu.Icon"></i></text> } <span>@menu.Title<i class="fa fa-angle-left pull-right"></i></span>
                    </a>
                }
                <ul class="treeview-menu">
                    @foreach (var subMenu in menu.SubMenu)
                    {
                        if (!subMenu.Roles.Contains(role))
                        {
                            continue;
                        }
                        <li>
                            <a href="@Url.Action(subMenu.Action, subMenu.Controller, subMenu.RouteValue)">
                                @if (!string.IsNullOrEmpty(subMenu.Icon)) { <text><i class="@subMenu.Icon"></i></text> } <span>@subMenu.Title</span>
                            </a>
                        </li>
                    }
                </ul>
            </li>
        }
    }
</ul>
