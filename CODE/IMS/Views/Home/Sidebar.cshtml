@model HomeSidebarViewModel

@{
    var data = new List<SidebarItemModel>();
    data.Add(new SidebarItemModel("Server", "Index", "Server") { Roles = new List<string>() { "Shift Head", "Customer" } });
    data.Add(new SidebarItemModel("Request History", "Index", "Request") { Roles = new List<string>() { "Customer" } });
    data.Add(new SidebarItemModel("Location", "Index2", "Location") { Roles = new List<string>() { "Shift Head" } });
    data.Add(new SidebarItemModel("IP Address", "Index2", "IP") { Roles = new List<string>() { "Shift Head" } });
    data.Add(new SidebarItemModel("Account", "Index", "Account") { Roles = new List<string>() { "Shift Head" } });
    data.Add(new SidebarItemModel("Create request", "", "")
    {
        Roles = new List<string>() { "Customer" },
        SubMenu = new List<SidebarItemModel>()
        {
            new SidebarItemModel("Add New Server", "Create", "Request", new { Type = Constants.RequestTypeCode.ADD_SERVER})
            {
                Roles = new List<string>() { "Customer" }
            },
            new SidebarItemModel("Bring Away Server", "Create", "Request", new { Type = Constants.RequestTypeCode.BRING_SERVER_AWAY})
            {
                Roles = new List<string>() { "Customer" }
            },
            new SidebarItemModel("Assign IP Address", "Create", "Request", new { Type = Constants.RequestTypeCode.ASSIGN_IP})
            {
                Roles = new List<string>() { "Customer" }
            },
            new SidebarItemModel("Change IP Address", "Create", "Request", new { Type = Constants.RequestTypeCode.CHANGE_IP})
            {
                Roles = new List<string>() { "Customer" }
            },
            new SidebarItemModel("Return IP Address", "Create", "Request", new { Type = Constants.RequestTypeCode.RETURN_IP})
            {
                Roles = new List<string>() { "Customer" }
            },
            new SidebarItemModel("Rent Rack", "Create", "Request", new { Type = Constants.RequestTypeCode.RENT_RACK})
            {
                Roles = new List<string>() { "Customer" }
            },
            new SidebarItemModel("Return Rack", "Create", "Request", new { Type = Constants.RequestTypeCode.RETURN_RACK})
            {
                Roles = new List<string>() { "Customer" }
            }
        }
    });
    data.Add(new SidebarItemModel("Report", "", "")
    {
        Roles = new List<string>() { "Shift Head", "Customer" },
        SubMenu = new List<SidebarItemModel>()
        {
            new SidebarItemModel("Server Moving", "", "") { Roles = new List<string>() { "Shift Head", "Customer" } },
            new SidebarItemModel("Blocked IP Address", "ReportBlockIP", "Report") { Roles = new List<string>() { "Shift Head", "Customer" } },
            new SidebarItemModel("Free IP Address", "", "") { Roles = new List<string>() { "Shift Head", "Customer" } }
        }
    });

    var role = Model.Role;
}

<!-- Sidebar user panel -->
@if (Model.Account != null)
{
    var account = Model.Account;
    <div class="user-panel">
        <div class="pull-left image">
            <img src="@Url.Content("~/img/avatar3.png")" class="img-circle" alt="User Image" />
        </div>
        <div class="pull-left info">
            <p>Hello, @account.LastName</p>

            <a href="#"><i class="fa fa-circle text-success"></i> Online</a>
        </div>
    </div>
}

<!-- Sidebar navigation panel -->
<ul class="sidebar-menu">
    @foreach (var menu in data)
    {
        if (!menu.Roles.Contains(role))
        {
            continue;
        }
        if (menu.SubMenu.Count == 0)
        {
            <li>
                <a href="@Url.Action(menu.Action, menu.Controller, menu.RouteValue)"><i class="fa fa-table"></i><span>@menu.Title</span></a>
            </li>
        }
        else
        {
            <li class="treeview ">
                @{
                    if (menu.Title == "Create request")
                    {
                        <a href="#"><i class="fa fa-pencil-square-o"></i><span>@menu.Title</span><i class="fa fa-angle-left pull-right"></i></a>
                    }
                    else
                    {
                        <a href="#"><i class="fa fa-bar-chart-o"></i><span>@menu.Title</span><i class="fa fa-angle-left pull-right"></i></a>
                    }
                }
                <ul class="treeview-menu">
                    @foreach (var subMenu in menu.SubMenu)
                    {
                        if (!subMenu.Roles.Contains(role))
                        {
                            continue;
                        }
                        <li><a href="@Url.Action(subMenu.Action, subMenu.Controller, subMenu.RouteValue)"><i class="fa fa-angle-double-right"></i>@subMenu.Title</a></li>
                    }
                </ul>
            </li>
                        }
                    }
</ul>
