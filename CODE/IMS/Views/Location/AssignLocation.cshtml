@using IMS.Data.Models
@using IMS.Data.ViewModels
@model IMS.Models.LocationIndexViewModel

@{
    ViewBag.Title = Pages.LocationAvai;
    ViewBag.PageTitle = Pages.LocationAvai;
    ViewBag.Breadcrumbs = new List<BreadcrumbModel>
    {
        new BreadcrumbModel("Home", "Index", Pages.Home),
        new BreadcrumbModel("Location", "AssignLocation", Pages.LocationAvai)
    };
}


@using (Html.BeginForm())
{

    <section class="content">
        <div class="@Constants.HtmlFormat.FORM_LABEL_CLASS hidden">
            @Html.HiddenFor(model => model.FailMessage)
        </div>
        @if (Model.Notice == "HaveRack")
        {
            <div class="row hide">
                <div id="dropdown-template" class="col-xs-3">
                    <label>Rack of Datacenter: @Html.DropDownListFor(model => model.RackCode1, Model.Racks1, "--Select--", new {@class = "form-control input-sm", style = "width: 150px"}) </label>
                    <label>Rack of Customer: @Html.DropDownListFor(model => model.RackCode, Model.Racks, "--Select--", new {@class = "form-control input-sm", style = "width: 150px"}) </label>

                </div>

            </div>
        }
        else
        {
            <div class="row hide">
                <div id="dropdown-template" class="col-xs-3">
                    <label>Rack: @Html.DropDownListFor(model => model.RackCode, Model.Racks, new {@class = "form-control input-sm", style = "width: 150px"}) </label>
                </div>
            </div>
        }


        <table id="example1" class="table table-bordered table-hover">
            <thead>
            <tr style="background-color: #404040">
                <th><span style="color: ghostwhite">Rack Code</span>
                <th><span style="color: ghostwhite">Rack Name</span>
                <th><span style="color: ghostwhite">Rack Unit</span></th>
                <th><span style="color: ghostwhite">Server Code</span></th>
                <th></th>
            </tr>
            </thead>
        </table>

    </section><!-- /.content -->

    <section class="content">
        @Html.HiddenFor(model=>model.RequestCode)
        @Html.HiddenFor(model=>model.RequestType)
        @Html.HiddenFor(model=>model.Size)
        @if (Model.RequestType == "Change")
        {
            @Html.ActionLink("Cancel", "Detail", "Server", new { code = Model.ServerCode }, htmlAttributes: new { @class = "btn btn-default pull-right" })
            <button type="submit" id="change" class="btn btn-primary pull-right">Change</button>
        }
        else
        {
            @Html.ActionLink("Cancel", "Detail", "ProcessRequest", new { rType = Model.RequestType, rCode = Model.RequestCode }, htmlAttributes: new { @class = "btn btn-default pull-right" })
            <button type="submit" id="assign" class="btn btn-primary pull-right">Assign</button>
        }
        
       
    </section>


}
<script>
    var message = $('#FailMessage').val();
    if (message) {
        notif({
            msg: "<b>Fail! </b>" + message,
            type: "error",
            position: "center"
        });
        $('#FailMessage').val("");
    };
    $.fn.dataTable.ext.search.push(
        function(settings, data, dataIndex) {
            var rackCode = $('#RackCode').val();
            var rackCode1 = $('#RackCode1').val();
            if (rackCode1 == data[0]) {
                return true;
            }
            if (rackCode == '') {
                return false;
            }
            if (rackCode == data[0]) {
                return true;
            }
            
            if (rackCode1 == '') {
                return false;
            }
            
            

        }
    );
</script>

<script>
    var size = @Model.Size;

    function mouseenter(e) {
        var rows = $('#example1 tbody tr');
        var row = $(this);
        var isValid = true;
        var index = rows.index(row);
        if (index != 0) {
            index = index - Math.floor((size - 1) / 2);
        }
        if (index + size - 1 < rows.length) {
            for (var i = index; i < index + size; i++) {
                row = $(rows.get(i));
                if (row.find('input[type="checkbox"][free]').length == 0) {
                    isValid = false;
                }
            }
        } else {
            isValid = false;
        }
        if (isValid) {
            for (var i = index; i < index + size; i++) {
                row = $(rows.get(i));
                row.css('cursor', 'pointer');
                row.css('background-color', '#0000ff');
            }
        } else {
            row.css('cursor', 'not-allowed');
        }
    }

    function mouseleave(e) {
        $('#example1 tbody tr').css('background-color', '');
        $('#example1 tbody tr').css('cursor', '');
    }

    function mouseclick(e) {
        var rows = $('#example1 tbody tr');
        var row = $(this);
        var isValid = true;
        var index = rows.index(row);
        if (index != 0) {
            index = index - Math.floor((size - 1) / 2);
        }
        if (index + size - 1 < rows.length) {
            for (var i = index; i < index + size; i++) {
                row = $(rows.get(i));
                if (row.find('input[type="checkbox"][free]').length == 0) {
                    isValid = false;
                }
            }
        } else {
            isValid = false;
        }
        if (isValid) {
            $('#example1 tbody tr input[type="checkbox"]').prop('checked', false);
            for (var i = index; i < index + size; i++) {
                row = $(rows.get(i));
                row.find('input[type="checkbox"]').prop('checked', true);
            }
        }
    }
</script>

<script type="text/javascript">
    var selectedChkCount = 0;
    $('#example1').on('click', '.chknull', function () {
        var selectedChk = $('.chknull:checked');
        //alert(selectedChk.length);
        selectedChkCount = selectedChk.length;
    });

    //Get value of selected items
    $("#assign").click(function () {
        if (selectedChkCount <= 0) {
            notif({
                msg: "Select location to assign!",
                type: "error",
                position: "center"
            });
            return false;
        }
    });
    $("#change").click(function () {
        if (selectedChkCount <= 0) {
            notif({
                msg: "Select location to change!",
                type: "error",
                position: "center"
            });
            return false;
        }
    });
    var table = $('#example1').DataTable({
        language: {
            "zeroRecords": "<label style='color:coral'>DO NOT HAVE AVAILABLE LOCATION</label>"
        },
        dom: '<lf<t>ip>',
        processing: true,
        ajax: "@Url.Action("GetLocationForAssign", "Location", new {httproute = "", code = Model.ServerCode})",
        columns: [
            { data: "RackCode" },
            { data: "RackName" },
            { data: "RackUnit" },
            { data: "ServerCode" },
            { data: "LocationCode" }
        ],
        iDisplayLength: 42,
        bLengthChange: false,
      
        fnRowCallback: function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
            var row = $(nRow);
            row.hover(mouseenter, mouseleave);
            row.click(mouseclick);
            var actionCell = $(nRow.cells[3]);
            actionCell.html('');
            actionCell.append('<input type="hidden" class="chknull" name="Selected[' + iDisplayIndex + '].LocationCode" value="' + aData.LocationCode + '">');
            switch (aData.StatusName) {
            case 'Free':
                actionCell.append('<input type="checkbox" class="chknull" free name="Selected[' + iDisplayIndex + '].IsSelected" value="true"/>');
                break;
            default:
                actionCell.append('<input type="checkbox" class="chknull" name="Selected[' + iDisplayIndex + '].IsSelected" value="true"/>');
                break;

            }
            switch (aData.ServerCode) {
            case '@Model.ServerCode':
                row.addClass('background-danger');              
                break;
            case null:
                break;
            default:
                row.addClass('background-info');
                break;
            }

        },
        order: [[1, "acs"], [2, "desc"]],
        columnDefs: [{
            targets: [0],
            visible: false,
            searchable: true
        }]
       
    });

    $('#example1_filter').append($('#dropdown-template').html());
    $('#dropdown-template').html('');

    $('#RackCode1').change(function () {
        table.draw();
    });
    $('#RackCode').change(function () {
        table.draw();
    });


</script>

<script>
    $(document).on("click", ".open-blockIP-modal", function () {
        var code = $(this).data('id');
        var size = $(this).data('id1');

        $(".modal-footer #servercode").val(code);
        $(".modal-footer #size").val(size);
    });
</script>


