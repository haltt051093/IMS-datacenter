<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head>
		<title>How R.C. Servo Motors Work</title>
		<link type="text/css" href="How%20R.C.%20Servo%20Motors%20Work_files/styles.css" rel="stylesheet">
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	</head>
	<body>
		<!-- Header Bar -->
		<table id="pageheader">
			<tbody><tr>
				<td class="logo"><a href="http://www.digitalnemesis.com/"><img src="How%20R.C.%20Servo%20Motors%20Work_files/dn-logo-250-40-none.gif" alt="Digital Nemesis" height="40" width="250"></a></td>
				<td class="sitenav">
					<a href="http://www.digitalnemesis.com/">Home</a> 
					| 
					<a href="http://www.digitalnemesis.com/sitemap/">Site Map</a>
				</td>
			</tr>
		</tbody></table>
		<!-- Navigation and Content container -->
		<table id="pagecontent">
			<tbody><tr>
				<td id="navigation">
					<h1><a href="http://www.digitalnemesis.com/" title="Home Page.">Home</a></h1><h1><a href="http://www.digitalnemesis.com/products/" title="Products for sale.">Products</a></h1><a class="ind" href="http://www.digitalnemesis.com/products/rlc1/" title="An affordable and compact RS232 to CMOS/TTL Serial Level Converter working with 3 volt or 5 volt logic levels.">RS232 Level Converter</a><h1><a href="http://www.digitalnemesis.com/services/" title="Services offered by Digital Nemesis Pty Ltd.">Services</a></h1><h1><a href="http://www.digitalnemesis.com/info/" title="Information and projects you can use.">Free Projects &amp; Info</a></h1><a class="ind" href="http://www.digitalnemesis.com/info/docs/rcservo/" title="How R.C. Servo Motors work and how to control them from a microcontroller.">How Servo Motors Work</a><a class="ind" href="http://www.digitalnemesis.com/info/projects/picservo/" title="PIC based serial port servo controller.">PIC Servo</a><a class="ind" href="http://www.digitalnemesis.com/info/codesamples/embeddedcrc16/" title="Example code for generating and using a tiny CRC16 lookup table targeted to embedded processors.">Embedded CRC16</a><a class="ind" href="http://www.digitalnemesis.com/info/software/gerberplot/" title="Convert Gerber files to HPGL (pen plotter) instructions to directly plot a PCB pattern to a board for etching.">GerberPlot</a>
				</td>
				<td id="contentcontainer">
					<div id="content">

<div style="float:right;padding-left: 5px;">
<script src="How%20R.C.%20Servo%20Motors%20Work_files/ca-pub-4577008066159573.js" type="text/javascript" async=""></script><script type="text/javascript"><!--
google_ad_client = "pub-4577008066159573";
google_alternate_color = "FFFFFF";
google_ad_width = 120;
google_ad_height = 600;
google_ad_format = "120x600_as";
google_ad_type = "text_image";
google_ad_channel ="";
google_color_border = "D5D580";
google_color_bg = "FFFFFF";
google_color_link = "F28900";
google_color_url = "666666";
google_color_text = "333333";
//--></script>
<script type="text/javascript" src="How%20R.C.%20Servo%20Motors%20Work_files/show_ads.js">
</script><ins id="aswift_0_expand" style="display:inline-table;border:none;height:600px;margin:0;padding:0;position:relative;visibility:visible;width:120px;background-color:transparent"><ins id="aswift_0_anchor" style="display:block;border:none;height:600px;margin:0;padding:0;position:relative;visibility:visible;width:120px;background-color:transparent"><iframe marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){try{h=s.upd(h,i)}catch(e){}w.location.replace(h)}}" id="aswift_0" name="aswift_0" style="left:0;position:absolute;top:0;" frameborder="0" height="600" width="120"></iframe></ins></ins>
</div>


<h1>How R.C. Servo Motors Work</h1>

<p>
    A servo motor consists of several main parts, the motor and gearbox, a position sensor, an error amplifier and motor 
    driver and a circuit to decode the requested position. Figure 1 contains a block diagram of a typical servo motor unit.
</p>

<p>
    The radio control receiver system (or other controller) generates a 
pulse of varying length approximately every 20 milliseconds.
    The pulse is normally between 1 and 2 milliseconds long. The length 
of the pulse is used by the servo to determine the position it
    should rotate to.
</p>

<div class="figure">
	<img src="How%20R.C.%20Servo%20Motors%20Work_files/servodiagram1.png" alt="Servo Motor Block Diagram" height="293" width="558">
	<br>
	Figure 1. Servo Motor Block Diagram
</div>

<p>
    Starting from the control pulse we will work though each part of the
 diagram and explain how it all fits together.
    Once we have gone through how the servo works we will investigate 
how the control pulses can be generated with a microcontroller.
</p>

<h2>Pulse width to voltage converter</h2>

<p>
    The control pulse is feed to a pulse width to voltage converter. This circuit charges a capacitor at a 
    constant rate while the pulse is high. When the pulse goes low the charge on the capacitor is fed to the output
    via a suitable buffer amplifier. This essentially produces a voltage related to the length of the applied pulse.
</p>

<p>
    The circuit is tuned to produce a useful voltage over a 1ms to 2ms period. The output voltage is buffered and so does not 
    decay significantly between control pulses so the length of time between pulses is not critical.
</p>

<h2>Position Sensor</h2>

<p>
    The current rotational position of the servo motor output shaft is 
read by a sensor. This is normally a potentiometer (variable resistor)
    which produces a voltage that is related to the absolute angle of 
the output shaft.
</p>

<p>
    The position sensor then feeds its current value into the Error Amplifier which compares the current position 
    with the commanded position from the pulse width to voltage converter.
</p>

<h2>Error Amplifier</h2>

<p>
    The error amplifier is an operational amplifier with negative 
feedback. It will always try to minimise the difference between the
    inverting (negative) and non-inverting (positive) inputs by driving 
its output is the correct direction. 
</p>

<p>
    The output of the error amplifier is either a negative or positive voltage representing the difference between its inputs. 
    The greater the difference the greater the voltage.
</p>

<p>
    The error amplifier output is used to drive the motor; If it is 
positive the motor will turn in one direction, if negative the other.
    This allows the error amplifier to reduce the difference between its
 inputs (thus closing the negative feedback loop) and so 
    make the servo go to the commanded position.
</p>

<p>
    The servo normally contains a single integrated circuit and a hand 
full of discreet components to implement the entire control system.
</p>

<h1>Controlling a Servo Motor with a Microcontroller</h1>

<p>
    From the above we can determine that we need to generate a pulse 
approximately every 20ms although the actual time between pulses
    is not critical. The pulse width however must be accurate to ensure 
that we can accurately set the position of the servo.
</p>

<h2>PWM modules</h2>

<p>
    Many microcontrollers are equipped with PWM generators and most 
people initially consider using these to generate the control signals.
    Unfortunately they are not really suitable.    
</p>

<p>
    The problem is that we need a relatively accurate short pulse then a
 long delay; and generally you only have one PWM generator share 
    between several servos which would require switching components 
outside the microcontroller and complicate the hardware.
</p>

<p>
    The PWM generator is designed to generate an accurate pulse between 
0% and 100% duty cycle, but we need something in the order of 5% to 
    10% duty cycle (1ms/20ms to 2ms/20ms). If a typical PWM generator is
 8 or 10 bits say, then we can only use a small fraction of the 
    bits to generate the pulse width we need and so we loose a lot of 
accuracy.
</p>

<h2>Timers</h2>

<p>
    A more beneficial approach can be implemented with simple timers and
 software interrupts. The key is realising that we can
    run a timer at a faster rate and do a single servo at a time, 
followed by the next and the next etc. Each of the outputs is driven 
    in turn for its required time and then turned off. Once all outputs 
have been driven, the cycle repeats.
</p>

<p>
    This approach is demonstrated in the PIC servo controller project.
</p>

<p>
    The timer is configured so that we have plenty of accuracy over the 1
 to 2 millisecond pulse time. Each servo pin is driven 
    high in turn and the timer configured to interrupt the processor 
when the pulse should be finished. The interrupt routine then
    drives the output low.
</p>

<p>
    For simplicity, the output pins can be arranged on a single port and the value zero (0x00) written to the port to turn off
    all pins at once so that the interrupt routine does not need to know which servo output is currently active.
</p>

<p>
    After the pulse has ended, the microprocessor sets up the next pulse and begins the process again.
</p>


					</div>
				</td>
			</tr>
		</tbody></table>
		<!-- Page Footer -->
		<div id="pagefooter">
			<div class="w3clogo">
				<p>
					<a href="http://validator.w3.org/check?uri=referer"><img src="How%20R.C.%20Servo%20Motors%20Work_files/valid-xhtml10.gif" alt="Valid XHTML 1.0 Strict" height="31" width="88"></a>
				</p>
			</div>
		
			Â© Copyright 2015, Digital Nemesis Pty Ltd. All Rights Reserved. | <a href="http://www.digitalnemesis.com/privacy.aspx">privacy statement</a> | <a href="http://www.digitalnemesis.com/contact.aspx">contact us</a>
			<span class="lastupdated"><br>Last updated: Sun 03 Sep 2006 02:00 UTC</span>
		</div>
		
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script><script src="How%20R.C.%20Servo%20Motors%20Work_files/ga.js" type="text/javascript"></script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-5669383-1");
pageTracker._trackPageview();
</script>		
	

</body></html>